[{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of contents","title":"panGenomeBreedr_Workflows","text":"Requirements Recommended packages Installation Current Functionality panGB Pangenome Data Database Rationale Recommended Schema SQLite Database Database Creation Query Variant Tables Filter Variants Allele Frequency Summarize SnpEff Annotation Impact KASP Marker Design KASP Marker Validation Creating Heatmaps panGB Trait Introgression Hypothesis Testing Decision Support MABC Weighted RPP computation panGB Decision Support Foreground Selection Troubleshooting Authors contributors License Support Feedback","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"panGenomeBreedr_Workflows","text":"use package locally machine, following R packages required: ggplot2 gridExtra utils stats reshape2 BSgenome Biostrings GenomicRanges IRanges msa","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"recommended-packages","dir":"Articles","previous_headings":"","what":"Recommended packages","title":"panGenomeBreedr_Workflows","text":"Rtools: Needed package development installation GitHub Windows PCs. UpSetR: Required generating UpSet plots.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"panGenomeBreedr_Workflows","text":"First, ensure existing packages date. can install development version panGenomeBreedr GitHub :","code":"# Install panGenomeBreedr if (!require(\"devtools\")) install.packages(\"devtools\")  devtools::install_github(\"awkena/panGenomeBreedr\", upgrade = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"installing-bioconductor-dependency-packages","dir":"Articles","previous_headings":"Installation","what":"Installing Bioconductor dependency packages","title":"panGenomeBreedr_Workflows","text":"panGB depends list Bioconductor packages may installed automatically alongside panGB. manually install packages, use code snippet :","code":"# Install and load required Bioconductor packages if (!require(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\")    BiocManager::install(c(\"Bsgenome\",                          \"Biostrings\",                          \"GenomicRanges\",                          \"IRanges\",                          \"msa\"))"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"current-functionality-of-pangb","dir":"Articles","previous_headings":"","what":"Current Functionality of panGB","title":"panGenomeBreedr_Workflows","text":"panGB currently provides functionality following key tasks: Variant discovery Identify variants within candidate genes user-defined genomic interval using snpEff-annotated VCF files. KASP marker design Generate allele-specific markers targeting either causal variants variant interest. Marker validation QC visualization Produce quality control plots perform hypothesis-driven evaluations assess marker reliability. Decision-support trait introgression Guide marker-assisted backcrossing profiling foreground, background, precision-introgression markers support selection decisions.","code":""},{"path":[]},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"pangenome-data-and-database-rationale","dir":"Articles","previous_headings":"Variant Discovery","what":"Pangenome Data and Database Rationale","title":"panGenomeBreedr_Workflows","text":"examples used documentation based sorghum pangenome resources derived whole-genome resequencing data 1,676 sorghum lines. Variant calling performed using version v5.1 BTx623 reference genome. resulting SNP INDEL variants functionally annotated using snpEff. Direct querying snpEff-annotated VCF files R often computationally slow inefficient, especially large datasets. overcome limitation, built SQLite database stores variants, annotations, genotypes normalized tables. structure allows fast flexible access relevant data, supporting workflows trait-predictive marker discovery. strongly recommend creation similar databases crops. SQLite format offers compact, portable, queryable representation pangenome-derived variant data, significantly improving performance reproducibility variant discovery pipelines. compressed format SQLite database sorghum can downloaded .","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"recommended-schema-for-the-sqlite-database","dir":"Articles","previous_headings":"Variant Discovery","what":"Recommended Schema for the SQLite Database","title":"panGenomeBreedr_Workflows","text":"SQLite database contains following three key tables:","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"variants","dir":"Articles","previous_headings":"Variant Discovery > Recommended Schema for the SQLite Database","what":"variants","title":"panGenomeBreedr_Workflows","text":"table stores core metadata variant information extracted VCF.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"annotations","dir":"Articles","previous_headings":"Variant Discovery > Recommended Schema for the SQLite Database","what":"annotations","title":"panGenomeBreedr_Workflows","text":"table contains functional annotations snpEff, typically including predicted effects, gene names, functional categories.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"genotypes","dir":"Articles","previous_headings":"Variant Discovery > Recommended Schema for the SQLite Database","what":"genotypes","title":"panGenomeBreedr_Workflows","text":"table stores genotype calls per sample variant wide format.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"database-creation","dir":"Articles","previous_headings":"Variant Discovery","what":"Database Creation","title":"panGenomeBreedr_Workflows","text":"generated SQLite database using custom workflow Parses multi-sample VCF file annotated snpEff, Extracts variant, annotation, genotype data, Writes data normalized relational tables (variants, annotations, genotypes). prebuilt mini example database (mini_sorghum_variant_vcf.db.gz) included extdata/ folder package.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"query-variant-tables","dir":"Articles","previous_headings":"Variant Discovery","what":"Query Variant Tables","title":"panGenomeBreedr_Workflows","text":"query_db() function allows users query specific tables within panGenomeBreedr-formatted SQLite database variants, annotations, genotypes based chromosome coordinates candidate gene IDs. function retrieves records one following tables database: variants: Basic variant information (chromosome, position, REF/ALT alleles, etc.) annotations: Variant effect predictions (e.g., snpEff) genotypes: Genotypic data across lines/samples plus metadata variants. Users can specify genomic coordinates (chrom, start, end) candidate gene name (gene_name) extract relevant entries. used correctly, query_db() function returns data frame containing filtered records selected table. Table 1: Queried genotypes varaints SQLite database. Table 2: Queried annotations variants SQLite database. query_db() function following key arguments:","code":"library(panGenomeBreedr)  # This example uses the mini SQLite database included in the package. # Define a temporary path and decompress the example database path <- tempdir() mini_db <- system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                        package = \"panGenomeBreedr\", mustWork = TRUE) mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db') R.utils::gunzip(mini_db, destname = mini_db_path, remove = FALSE)  # Query VCF genotypes within the genomic range: Chr05:75104537-75106403 gt_region <- query_db(db_path = mini_db_path,                       chrom = \"Chr05\",                       start = 75104537,                       end = 75106403,                       table_name = \"genotypes\")  # Query snpEff annotations within a candidate gene annota_region <- query_db(db_path = mini_db_path,                           chrom = \"Chr05\",                           start = 75104537,                           end = 75106403,                           table_name = \"annotations\",                           gene_name = \"Sobic.005G213600\")  # Clean up temporary files unlink(list.files(tempdir(), full.names = TRUE, recursive = TRUE),         recursive = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"filter-variants-by-allele-frequency","dir":"Articles","previous_headings":"Variant Discovery","what":"Filter Variants by Allele Frequency","title":"panGenomeBreedr_Workflows","text":"query_by_af() function allows users extract variants SQLite database based alternate allele frequency thresholds within specified genomic region. particularly useful identifying polymorphic sites within candidate gene regions windows interest meet desired minor allele frequency (MAF) thresholds marker development. example usage query_by_af() function shown code snippet : Table 3: Filtered variants SQLite database. query_by_af() function following input parameters:","code":"library(panGenomeBreedr)  # Define temporary directory and decompress demo database path <- tempdir() mini_db <- system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                        package = \"panGenomeBreedr\", mustWork = TRUE) mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db') R.utils::gunzip(mini_db, destname = mini_db_path, remove = FALSE)  # Filter variants with alt allele frequency between 1% and 99% in a defined region filter_af <- query_by_af(db_path = mini_db_path,                          min_af = 0.01,                          max_af = 0.99,                          chrom = \"Chr05\",                          start = 75104537,                          end = 75106403)  # Clean up temporary files unlink(list.files(tempdir(), full.names = TRUE, recursive = TRUE),         recursive = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"summarize-snpeff-annotation-and-impact","dir":"Articles","previous_headings":"Variant Discovery","what":"Summarize SnpEff Annotation and Impact","title":"panGenomeBreedr_Workflows","text":"query_ann_summary() function provides convenient way summarize distribution SnpEff annotations impact categories across variant types (e.g., SNPs, indels) within defined genomic region. function enables users quickly assess types functional implications variants located within candidate genes genomic intervals interest. Annotation summary variants within genomic range. Functional impact summary variants within genomic range. query_ann_summary() function following input parameters: query_ann_summary() function returns list following elements: annotation_summary: Data frame summarizing count SnpEff annotation grouped variant type. impact_summary: Data frame summarizing count SnpEff impact level (e.g., HIGH, MODERATE) grouped variant type. variant_type_totals: Total count variants region grouped variant type. annotation summary shows six (6) INDEL variants HIGH impact protein function. see variants, need use query_by_impact() function, shown : HIGH impact variants within defined genomic range.","code":"library(panGenomeBreedr)  # Prepare test database path <- tempdir() mini_db <- system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                        package = \"panGenomeBreedr\", mustWork = TRUE) mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db') R.utils::gunzip(mini_db, destname = mini_db_path, remove = FALSE)  # Run annotation summary for region Chr05:75104537-75106403 ann_summary <- query_ann_summary(db_path = mini_db_path,                                  chrom = \"Chr05\",                                  start = 75104537,                                  end = 75106403) # Clean up unlink(list.files(tempdir(), full.names = TRUE, recursive = TRUE),         recursive = TRUE) # Prepare test database path <- tempdir() mini_db <- system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                        package = \"panGenomeBreedr\", mustWork = TRUE) mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db') R.utils::gunzip(mini_db, destname = mini_db_path, remove = FALSE)  # Extract low impact variant for a region or gene high_variants <- query_by_impact(db_path = mini_db_path,                                 impact_level = 'high',                                 chrom = \"Chr05\",                                 start = 75104537,                                 end = 75106403)  # Clean up unlink(list.files(tempdir(), full.names = TRUE, recursive = TRUE),         recursive = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"kasp-marker-design","dir":"Articles","previous_headings":"","what":"KASP Marker Design","title":"panGenomeBreedr_Workflows","text":"kasp_marker_design() function enables design KASP (Kompetitive Allele Specific PCR) markers identified putative causal variants. supports SNP, insertion, deletion variants using VCF genotype data reference genome generate Intertek-compatible marker information, including upstream downstream polymorphic context. function automates extraction flanking sequences polymorphic variants surrounding focal variant generates: Intertek-ready marker submission metadata DNA sequence alignment visual inspection marker context optional publication-ready alignment plot PDF format vcf file must contain variant ID, Chromosome ID, Position, REF ALT alleles, well genotype data samples, shown Table 1: HIGH impact variants within defined genomic range. kasp_marker_design() function following input parameters: kasp_marker_design() function returns data.frame marker design metadata: SNP_Name: Variant ID SNP: Type variant (SNP/INDEL) Marker_Name: Assigned name marker Chromosome: Chromosome name Chromosome_Position: Variant position Sequence: Intertek-style polymorphism sequence ReferenceAllele: Reference allele AlternativeAllele: Alternate allele plot_draw = TRUE, PDF plot sequence alignment saved plot_file. Fig. 2. Alignment 100 bp upstream downstream sequences reference genome used KASP marker design. required sequence submission Intertek designed KASP marker shown Table 5. Table 5: Intertek required sequence KASP marker.","code":"# Example to design a KASP marker on a HIGH impact Deletion variant library(panGenomeBreedr) path <- tempdir() # (default directory for saving alignment outputs)  # Path to import sorghum genome sequence for Chromosome 5 path1 <- \"https://raw.githubusercontent.com/awkena/panGB/main/Chr05.fa.gz\"  # KASP marker design for variant ID: INDEL_Chr05_75106156 in Table 1 lgs1 <- kasp_marker_design(gt_df = gt_region,                            variant_id_col = 'variant_id',                            chrom_col = 'chrom',                            pos_col = 'pos',                            ref_al_col = 'ref',                            alt_al_col = 'alt',                            genome_file = path1,                            geno_start = 7,                            marker_ID = \"INDEL_Chr05_75106156\",                            chr = \"Chr05\",                            plot_draw = TRUE,                            plot_file = path,                            region_name = \"lgs1\") #> using Gonnet   # View marker alignment output from temp folder path3 <- file.path(path, list.files(path = path, \"alignment_\")) system(paste0('open \"', path3, '\"')) # Open PDF file from R  on.exit(unlink(path)) # Clear the temp directory on exit"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"kasp-marker-validation","dir":"Articles","previous_headings":"","what":"KASP Marker Validation","title":"panGenomeBreedr_Workflows","text":"following example demonstrates use customizable functions panGB perform hypothesis testing allelic discrimination KASP marker QC validation. panGB offers customizable functions KASP marker validation hypothesis testing. functions allow users easily perform following tasks: - Import raw polished KASP genotyping results files (.csv) R. Process imported data assign FAM HEX fluorescence colors multiple plates. Visualize marker QC using FAM HEX fluorescence scores sample. Validate effectiveness trait-predictive background markers using positive controls. Visualize plate design randomization.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"reading-raw-kasp-full-results-files--csv","dir":"Articles","previous_headings":"KASP Marker Validation","what":"Reading Raw KASP Full Results Files (.csv)","title":"panGenomeBreedr_Workflows","text":"read_kasp_csv() function allows users import raw polished KASP genotyping full results file (.csv) R. function requires path raw file row tags different components data raw file arguments. polished files, user must extract Data component full results file save csv file import. default, typical unedited raw KASP data file uses following row tags genotyping data: Statistics, DNA, SNPs, Scaling, Data. raw file imported list object R. Thus, components imported data can extracted using row tag ID shown code snippet :","code":"# Import raw KASP genotyping file (.csv) using the read_kasp_csv() function library(panGenomeBreedr)  # Set path to the directory where your data is located # path1 <-  \"inst/extdata/Genotyping_141.010_01.csv\" path1 <-  system.file(\"extdata\", \"Genotyping_141.010_01.csv\",                        package = \"panGenomeBreedr\",                       mustWork = TRUE)  # Import raw data file file1 <- read_kasp_csv(file = path1,                         row_tags = c(\"Statistics\", \"DNA\", \"SNPs\", \"Scaling\", \"Data\"),                        data_type = 'raw')  # Get KASP genotyping data for plotting kasp_dat <- file1$Data"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"assigning-colors-and-pch-symbols-for-kasp-cluster-plotting","dir":"Articles","previous_headings":"KASP Marker Validation","what":"Assigning colors and PCH symbols for KASP cluster plotting","title":"panGenomeBreedr_Workflows","text":"next step importing data assign FAM HEX fluorescence colors samples based observed genotype calls. step accomplished using kasp_color() function panGB shown code snippet : kasp_color() function requires KASP genotype call file data frame can bulk processing multiple master plates. default values arguments kasp_color() function based KASP annotations. kasp_color() function calls kasp_pch() function automatically add PCH plotting symbols can equally used group genotypic clusters plot. expected genotype calls available positive controls KASP genotyping samples, recommend use PCH symbols grouping observed genotypes instead FAM HEX colors. kasp_color() function expects genotype calls diploid state alleles separated symbol. default KASP data separated : symbols. kasp_color() function returns list object processed data master plate components.","code":"# Assign KASP fluorescence colors using the kasp_color() function library(panGenomeBreedr) # Create a subet variable called plates: masterplate x snpid   kasp_dat$plates <- paste0(kasp_dat$MasterPlate, '_',                                  kasp_dat$SNPID) dat1 <- kasp_color(x = kasp_dat,                     subset = 'plates',                     sep = ':',                     geno_call = 'Call',                     uncallable = 'Uncallable',                     unused = '?',                     blank = 'NTC',                    assign_cols = c(FAM = \"blue\", HEX = \"gold\" ,                                     het = \"forestgreen\"))"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"cluster-plot","dir":"Articles","previous_headings":"KASP Marker Validation","what":"Cluster plot","title":"panGenomeBreedr_Workflows","text":"test hypothesis designed KASP marker can accurately discriminate homozygotes heterozygotes (allelic discrimination), cluster plot needs generated. kasp_qc_ggplot() kasp_qc_ggplot2()functions panGB can used make cluster plots plate KASP marker shown : Fig. 3. Cluster plot Plate 5 using FAM HEX colors grouping observed genotypes. Fig. 4. Cluster plot Plate 5 overlay predictions positive controls. Color-blind-friendly color combinations used visualize verified genotype predictions (Figure 3). Figure 4, three genotype classes grouped based plot PCH symbols using FAM HEX scores observed genotype calls. simplify verified prediction overlay expected genotypes positive controls, possible outcomes divided three categories (TRUE, FALSE, UNVERIFIED) color-coded make easier visualize verified predictions. BLUE (color code TRUE category) means genotype prediction matches observed genotype call sample. RED (color code FALSE category) means genotype prediction match observed genotype call sample. BEIGE (color code UNVERIFIED category) means three things: expected genotype call made KASP genotyping, observed genotype call made verify prediction. Users can set pdf = TRUE argument save plots PDF file directory outside R. kasp_qc_ggplot() kasp_qc_ggplot2()functions can generate cluster plots multiple plates simultaneously. visualize predictions positive controls validate KASP markers, column name containing expected genotype calls must provided passed function using Group_id = 'Group' argument shown code snippets . information available, set argument Group_id = NULL.","code":"# KASP QC plot for Plate 05 library(panGenomeBreedr) kasp_qc_ggplot2(x = dat1[5],                     pdf = FALSE,                     Group_id = NULL,                     scale = TRUE,                     expand_axis = 0.6,                     alpha = 0.9,                     legend.pos.x = 0.6,                     legend.pos.y = 0.75) #> $`SE-24-1088_P01_d1_snpSB00804` # KASP QC plot for Plate 05 library(panGenomeBreedr)  kasp_qc_ggplot2(x = dat1[5],                   pdf = FALSE,                   Group_id = 'Group',                   Group_unknown = '?',                   scale = TRUE,                   pred_cols = c('Blank' = 'black', 'False' = 'firebrick3',                               'True' = 'cornflowerblue', 'Unverified' = 'beige'),                   expand_axis = 0.6,                   alpha = 0.9,                   legend.pos.x = 0.6,                   legend.pos.y = 0.75) #> $`SE-24-1088_P01_d1_snpSB00804`"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"summary-of-prediction-verification-in-plates","dir":"Articles","previous_headings":"KASP Marker Validation","what":"Summary of Prediction Verification in Plates","title":"panGenomeBreedr_Workflows","text":"pred_summary() function produces summary predicted genotypes positive controls reaction plate verification (Table 3), shown code snippet : Table 3: Summary verified prediction status samples plates output pred_summary() function can visualized bar plots using pred_summary_plot() function shown code snippet : Fig. 5. Match/Mismatch rate predictions snp: snpSB00804.","code":"# Get prediction summary for all plates library(panGenomeBreedr) my_sum <- pred_summary(x = dat1,                        snp_id = 'SNPID',                        Group_id = 'Group',                        Group_unknown = '?',                        geno_call = 'Call',                        rate_out = TRUE) # Get prediction summary for snp:snpSB00804 library(panGenomeBreedr) my_sum <- my_sum$summ my_sum <- my_sum[my_sum$snp_id == 'snpSB00804',]   pred_summary_plot(x = my_sum,                     pdf = FALSE,                     pred_cols = c('false' = 'firebrick3', 'true' = 'cornflowerblue',                                   'unverified' = 'beige'),                     alpha = 1,                     text_size = 12,                     width = 6,                     height = 6,                     angle = 45) #> $snpSB00804"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"plot-plate-design","dir":"Articles","previous_headings":"KASP Marker Validation","what":"Plot Plate Design","title":"panGenomeBreedr_Workflows","text":"Users can visualize observed genotype calls plate design format using plot_plate() function depicted Figure 5, using code snippet : Fig. 6. Observed genotype calls samples Plate 5 plate design format.","code":"plot_plate(dat1[5], pdf = FALSE) #> $`SE-24-1088_P01_d1_snpSB00804`"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"decision-support-for-trait-introgression-and-mabc","dir":"Articles","previous_headings":"","what":"Decision Support for Trait Introgression and MABC","title":"panGenomeBreedr_Workflows","text":"panGB provides additional functionalities test hypotheses success trait introgression pipelines crosses. Users can easily generate heatmaps compare genetic background parents progenies ascertain target locus successfully introgressed check hybridity F1s. plots also allow users get visual insight amount parent germplasm recovered progenies. produce plots, users must either polymorphic low mid-density marker data map file markers. map file must contain marker IDs, chromosome numbers positions. panGBcan handle data KASP, Agriplex DArTag service providers.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"working-with-agriplex-mid-density-marker-data","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC","what":"Working with Agriplex Mid-Density Marker Data","title":"panGenomeBreedr_Workflows","text":"Agriplex data structurally different KASP DArTag data terms genotype call coding formatting. Agriplex uses ' / ' separator genotype calls heterozygotes, uses single nucleotides represent homozygous SNP calls.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"creating-heatmaps-with-pangb","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC","what":"Creating Heatmaps with panGB","title":"panGenomeBreedr_Workflows","text":"exemplify steps creating heatmap, use mid-density marker data three groups near-isogenic lines (NILs) parents (Table 4). NILs parents genotyped using Agriplex platform. NIL group genotyped using 2421 markers. imported data frame markers columns genotyped samples rows. comes meta data samples. Marker names informative: chromosome number position coordinates embedded marker names (Eg. S1_778962: chr = 1, pos = 779862). Table 4: Agriplex data format create heatmap compares genetic background parents NILs across markers, need first process raw Agriplex data numeric format. panGB package customizable data wrangling functions KASP, Agriplex, DArTag data. rm_mono() function can used filter monomorphic loci data. Since imported Agriplex data informative SNP IDs, can use parse_marker_ns() function generate map file (Table 5) markers. generated map file passed proc_kasp() function order SNP markers according chromosome numbers positions. kasp_numeric() function converts output proc_kasp() function numeric format (Table 6). re-coding numeric format done follows: Homozygous Parent 1 allele = 1. Homozygous Parent 2 allele = 0. Heterozygous = 0.5. Monomorphic loci = -1. Loci suspected genotype error = -2. Loci least one missing parental genotype = -5. Table 5: Map file imported Agriplex data. Table 6: Agriplex data converted numeric format. now set generate heatmap (Figure 6) using cross_qc_ggplot() function, shown code snippet : Fig. 6. heatmap compares genetic background parents stg5 NIL progenies across markers. cross_qc_ggplot() function wrapper functions ggplot2 package. Users must specify IDs two parents using parents argument. code snippet , recurrent parent BTx623 donor parent stg5 locus BTx642. group_sz argument must specified plot heatmap batches progenies avoid cluttering plot many observations. Users can set pdf = TRUE argument save plots PDF file directory outside R.","code":"# Set path to the directory where your data is located path1 <-  system.file(\"extdata\", \"agriplex_dat.csv\",                        package = \"panGenomeBreedr\",                       mustWork = TRUE)  # Import raw Agriplex data file geno <- read.csv(file = path1, header = TRUE, colClasses = c(\"character\")) # genotype calls  library(knitr) knitr::kable(geno[1:6, 1:10], caption = 'Table 4: Agriplex data format', format = 'html', booktabs = TRUE) # Parse snp ids to generate a map file library(panGenomeBreedr)  # Data for stg5 NILs stg5 <- geno[geno$Batch == 3, -c(1:6)]  rownames(stg5) <- geno$Genotype[17:25]  # Remove monomorphic loci from data stg5 <- rm_mono(stg5)  # Parse snp ids to generate a map file snps <- colnames(stg5) # Get snp ids map_file <- parse_marker_ns(x = snps, sep = '_', prefix = 'S')  # order markers in map file map_file <- order_markers(x = map_file) # Process genotype data to re-order SNPs based on chromosome and positions stg5 <- proc_kasp(x = stg5,                   kasp_map = map_file,                   map_snp_id = \"snpid\",                   sample_id = \"Genotype\",                   marker_start = 1,                   chr = 'chr',                   chr_pos = 'pos')  # Convert to numeric format for plotting num_geno <- kasp_numeric(x = stg5,                          rp_row = 1,                          dp_row = 3,                          sep = ' / ',                          data_type = 'agriplex') # Get prediction summary for snp:snpSB00804 library(panGenomeBreedr) # Create a heatmap that compares the parents to progenies cross_qc_ggplot(x = num_geno,                 map_file = map_file,                 snp_ids = 'snpid',                 chr = 'chr',                 chr_pos = 'pos',                 parents = c(\"BTx623a\", \"BTx642a\"),                 pdf = FALSE,                 filename = 'background_heatmap',                 legend_title = 'stg5_NILs',                 alpha = 0.9,                 text_size = 15) #> $Batch1"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"trait-introgression-hypothesis-testing","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC","what":"Trait Introgression Hypothesis Testing","title":"panGenomeBreedr_Workflows","text":"test hypothesis stg5 NIL development effective, can use cross_qc_annotate() function generate heatmap (Figure 7) annotation position stg5 locus Chr 1, shown : Fig. 7. Heatmap annotation stg5 locus Chr 1. code snippet , numeric matrix genotype calls associated map file required. recurrent donor parents must specified using parents argument. snp_ids, chr, chr_pos arguments can used specify column names marker IDs, chromosome number positions attached map file. trait_pos argument used specify position target locus (stg5) chromosome one. Users can specify positions multiple target loci components list object annotation. Figure 7, color intensity correlates positively marker density coverage. Thus, areas color (white vertical gaps) depicts gaps marker coverage data.","code":"########################################################################### # Subset data for the first 30 markers on Chr 1 stg5_ch1 <- num_geno[, map_file$chr == 1][,1:30]   # Get the map file for subset data stg5_ch1_map <- parse_marker_ns(colnames(stg5_ch1))  # Annotate a heatmap to show the stg5 locus on Chr 1 # The locus is between positions 0.98 - 1.8 Mbp on Chr 1 cross_qc_annotate(x = stg5_ch1,                   map_file = stg5_ch1_map,                   snp_ids = 'snpid',                   chr = 'chr',                   chr_pos = 'pos',                   parents = c(\"BTx623a\", \"BTx642a\"),                   trait_pos = list(stg5 = c(start = .98e6, end = 1.8e6)),                   text_scale_fct = 0.3,                   pdf = FALSE,                   legend_title = 'Stg5_NILs',                   alpha = 0.9,                   text_size = 15) #> $Batch1"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"decision-support-for-mabc","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC","what":"Decision Support for MABC","title":"panGenomeBreedr_Workflows","text":"Users can use calc_rpp_bc() function panGB calculate proportion recurrent parent background (RPP) fully recovered backcross progenies. also returns rpp value chromosome. computation, partially regions ignored, hence, heterozygous scores used. output calc_rpp_bc() function can passed rpp_barplot() function visualize computed RPP values progenies bar plot. Users can specify RPP threshold easily identify lines RPP values equal defined RPP threshold bar plot. can compute visualize observed RPP values stg5 NILs across polymorphic loci shown code snippet : Fig. 8. Computed RPP values stg5 NILs. RPP computation across chromosome. calc_rpp_bc() function panGB provides two algorithms computing observed RPP values: weighted unweighted RPP values. recommend use weighted algorithm account differences marker coverage across genome. algorithm weighted RPP values explained .","code":"# Calculate weighted RPP rpp <- calc_rpp_bc(x = num_geno,                    map_file = map_file,                    map_chr = 'chr',                    map_pos = 'pos',                    map_snp_ids = 'snpid',                    rp = 1,                    rp_num_code = 1,                    na_code = -5,                    weighted = TRUE)  # Generate bar plot for RPP values rpp_barplot(rpp_df = rpp,             rpp_threshold = 0.93,             text_size = 18,             text_scale_fct = 0.1,             alpha = 0.9,             bar_width = 0.5,             aspect_ratio = 0.5,             pdf = FALSE)"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"weighted-rpp-computation-in-pangb","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC > Decision Support for MABC","what":"Weighted RPP Computation in panGB","title":"panGenomeBreedr_Workflows","text":"Let wiw_i represent weight marker ii, based relative distances adjacent markers. set markers positions p1,p2,…,pnp_1, p_2, \\ldots, p_n, di=pi+1−pid_i = p_{+1} - p_i represents distance adjacent markers, weights can calculated follows: first marker =1i = 1: w1=d12∑=1n−1diw_1 = \\frac{d_1}{2 \\sum_{=1}^{n-1} d_i} middle marker 1<<n1 < < n: wi=di−1+di2∑=1n−1diw_i = \\frac{d_{-1} + d_i}{2 \\sum_{=1}^{n-1} d_i} last marker =ni = n: wn=dn−12∑=1n−1diw_n = \\frac{d_{n-1}}{2 \\sum_{=1}^{n-1} d_i} : did_i distance marker ii marker +1i+1, sumi=1n−1disum_{=1}^{n-1} d_i total distance across segments, used normalization. Let RPPRPP represent Recurrent Parent Proportion based relative distance weighting. wiw_i weight marker ii, mim_i represents whether marker ii matches recurrent parent mi=1m_i = 1 matches, mi=0m_i = 0 otherwise), weighted RPP calculated : RPPweighted=∑=1nwi⋅miRPP_{weighted} = \\sum_{=1}^n w_i\\cdot m_i unweighted RPP calculated without use weights follows: RPPunweighted=∑=1nminRPP_{unweighted} = \\frac{\\sum_{=1}^n m_i} n : wiw_i weight marker ii, calculated based relative distance covers, mim_i match indicator marker ii (1 matching recurrent parent, 0 otherwise), nn total number markers. formula provides sum weighted contributions marker, representing proportion recurrent parent genome individual.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"decision-support-for-foreground-selection","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC","what":"Decision Support for Foreground Selection","title":"panGenomeBreedr_Workflows","text":"foreground_select() find_lines() functions designed help breeders identify lines carry favorable alleles target loci using trait-predictive markers. process supports foreground selection marker-assisted selection pipelines.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"generate-a-binary-matrix-foreground_select-function","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC > Decision Support for Foreground Selection","what":"Generate a Binary Matrix: foreground_select() function","title":"panGenomeBreedr_Workflows","text":"foreground_select() function score Lines presence favorable alleles converting raw marker genotype data binary matrix (1 = favorable allele present, 0 = absent) based set trait-predictive markers. foreground_select() function shown code snippet : Binary matrix presence absence favorable alleles. foreground_select() function following input parameters:","code":"library(panGenomeBreedr)  # Marker genotype data geno <- data.frame(SNP1 = c(\"A:A\", \"A:G\", \"G:G\", \"A:A\"),                    SNP2 = c(\"C:C\", \"C:T\", \"T:T\", \"C:T\"),                    SNP3 = c(\"G:G\", \"G:G\", \"A:G\", \"A:A\"),                    row.names = c(\"Line1\", \"Line2\", \"Line3\", \"Line4\"))  # Trait-predictive marker metadata marker_info <- data.frame(qtl_markers = paste0(\"SNP\", 1:3),                            locus_name = paste0('loc', 1:3),                           fav_alleles = c(\"A\", \"C\", \"G\"),                                                     alt_alleles = c(\"G\", \"T\", \"A\"))  # Convert raw genotypes to binary (foreground profile) foreground_matrix <- foreground_select(geno_data = geno,                                        fore_marker_info = marker_info,                                        fore_marker_col = \"qtl_markers\",                                        fav_allele_col = \"fav_alleles\",                                        alt_allele_col = \"alt_alleles\",                                        select_type = \"homo\")"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"visualize-the-binary-data-with-upset-plot","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC > Decision Support for Foreground Selection","what":"Visualize the Binary Data with UpSet Plot","title":"panGenomeBreedr_Workflows","text":"Generate UpSet plot using UpSetR package explore co-occurrence favorable alleles across lines. UpSet plot allows users quickly determine: Whether line carries favorable alleles target loci. favorable alleles distributed across lines. loci rarely combined. Interpret UpSet Plot: Top bar plot: shows number lines unique combination (intersection) target loci favorable alleles. Bottom matrix dots lines: indicates loci involved combination. Left bar plot: shows many lines favorable allele individual target locus. Fig. 9. Visualizing co-occurrence favorable alleles across lines.","code":"# Make an Upset plot and overlay with trait loci names metadata <- data.frame(sets = marker_info$qtl_markers,                       locus = marker_info$locus_name)  nl <- ncol(foreground_matrix) # Number of markers  UpSetR::upset(foreground_matrix,               nsets = nl,               mainbar.y.label = \"Locus Intersection Size\",               sets.x.label = \"Locus Size\",               text.scale = 1.2,               set.metadata = list(data = metadata,                           plots = list(list(type = 'text',                                              assign = 8,                                             column = 'locus',                                             colors = rep('firebrick2', nl)))))"},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"query-lines-by-intersection-category-find_lines-function","dir":"Articles","previous_headings":"Decision Support for Trait Introgression and MABC > Decision Support for Foreground Selection","what":"Query Lines by Intersection Category: find_lines() function","title":"panGenomeBreedr_Workflows","text":"find_lines() function identifies lines based target loci profile filtering binary output foreground_select() return line names match desired allele presence/absence profile across loci. Using binary matrix, users can extract line IDs corresponding intersection (.e., specific combinations favorable alleles revealed UpSet plot). find_lines() function following input parameters:","code":"library(panGenomeBreedr)  # Find lines with favorable alleles at all target loci selected_lines <- find_lines(mat = foreground_matrix,                              present = c('SNP1', 'SNP2', 'SNP3'))  print(selected_lines) #> [1] \"Line1\""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"panGenomeBreedr_Workflows","text":"package run expected, check following: package properly installed? required dependencies installed? warnings error messages returned package installation? packages date installing panGB?","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"authors-and-contributors","dir":"Articles","previous_headings":"","what":"Authors and contributors","title":"panGenomeBreedr_Workflows","text":"Alexander Wireko Kena Israel Tawiah Tetteh Cruet Burgos Linly Banda Jacques Faye Fanna Maina Terry Felderhoff Geoffrey Preston Morris","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"license","dir":"Articles","previous_headings":"","what":"License","title":"panGenomeBreedr_Workflows","text":"GNU GPLv3","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/articles/panGenomeBreedr_Workflows.html","id":"support-and-feedback","dir":"Articles","previous_headings":"","what":"Support and Feedback","title":"panGenomeBreedr_Workflows","text":"support submission feedback, email maintainer Alexander Kena, PhD alex.kena24@gmail.com","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Wireko Kena. Author, maintainer. Israel Tawiah Tetteh. Author. Clara Cruet Burgos. Author. Joseph Pascal Sene. Contributor. Fanna Maina. Contributor. Geoffrey Preston Morris. Contributor, funder, reviewer.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kena , Tetteh , Cruet Burgos C (2025). panGenomeBreedr: Helpers pangenome-enabled crop breeding. R package version 0.1.0, https://github.com/awkena/panGenomeBreedr, https://awkena.github.io/panGenomeBreedr.","code":"@Manual{,   title = {panGenomeBreedr: Helpers for pangenome-enabled crop breeding},   author = {Alexander Wireko Kena and Israel Tawiah Tetteh and Clara {Cruet Burgos}},   year = {2025},   note = {R package version 0.1.0,      https://github.com/awkena/panGenomeBreedr},   url = {https://awkena.github.io/panGenomeBreedr}, }"},{"path":"https://awkena.github.io/panGenomeBreedr/index.html","id":"pangenomebreedr-","dir":"","previous_headings":"","what":"panGenomeBreedr","title":"panGenomeBreedr","text":"panGenomeBreedr (panGB) conceptualized unified, crop agnostic platform pangenome-enabled breeding follows standardized conventions natural casual variant analysis using pangenomes, marker design, marker QC hypothesis testing (Figure 1). seeks simplify enhance use pangenome resources cultivar development. Fig. 1. Conceptual workflow panGenomeBreedr (panGB) package pangenome-enabled marker development. Using snpEff-annotated VCF files organized within SQLite database, panGB enables querying variants within candidate genes user-defined genomic regions. retrieves mutation annotations predicted impacts snpEff identify putative causal variants (PCVs), serve basis designing functional trait-predictive markers. package supports hypothesis-driven validation markers also facilitates design additional marker types, including precision-introgression background markers. current development version, panGB provides customizable R functions variant discovery snpEff-annotated VCF files, KASP marker design, marker validation (Steps 1–3 Fig. 1). expand accessibility, panGB include user-friendly Shiny application, allowing non-R users leverage core features without requiring R programming experience. SNP Viewer tool LGC Genomics limited Windows platforms lacks standardized conventions visualizing positive controls marker validation, making difficult users conclusively assess marker performance. contrast, panGB offers platform-independent tools hypothesis testing, quality control (QC), validation KASP markers, addressing key gap existing visualization validation workflows. Submit bug reports feature suggestions, track changes issues page.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"panGenomeBreedr","text":"First, ensure existing packages date. can install development version panGenomeBreedr GitHub :","code":"# Install panGenomeBreedr if (!require(\"devtools\")) install.packages(\"devtools\")  devtools::install_github(\"awkena/panGenomeBreedr\", upgrade = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/index.html","id":"installing-bioconductor-dependency-packages","dir":"","previous_headings":"Installation","what":"Installing Bioconductor dependency packages","title":"panGenomeBreedr","text":"panGB depends list Bioconductor packages may installed automatically alongside panGB. manually install packages, use code snippet :","code":"# Install and load required Bioconductor packages if (!require(\"BiocManager\", quietly = TRUE)) install.packages(\"BiocManager\")    BiocManager::install(c(\"Bsgenome\",                          \"Biostrings\",                          \"GenomicRanges\",                          \"IRanges\",                          \"msa\"))"},{"path":"https://awkena.github.io/panGenomeBreedr/index.html","id":"current-functionality-of-pangb","dir":"","previous_headings":"","what":"Current Functionality of panGB","title":"panGenomeBreedr","text":"panGB currently provides functionality following key tasks: Variant discovery Identify variants within candidate genes user-defined genomic interval using snpEff-annotated VCF files. KASP marker design Generate allele-specific markers targeting either causal variants variant interest. Marker validation QC visualization Produce quality control plots perform hypothesis-driven evaluations assess marker reliability. Decision-support trait introgression Guide marker-assisted backcrossing profiling foreground, background, precision-introgression markers support selection decisions. 👉 full tutorial worked example, check panGenomeBreedr Workflow vignette.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/index.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"panGenomeBreedr","text":"package run expected, check following: package properly installed? required dependencies installed? warnings error messages returned package installation? packages date installing panGB?","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/index.html","id":"authors-and-contributors","dir":"","previous_headings":"","what":"Authors and contributors","title":"panGenomeBreedr","text":"Alexander Wireko Kena Israel Tawiah Tetteh Cruet Burgos Linly Banda Jacques Faye Fanna Maina Terry Felderhoff Geoffrey Preston Morris","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"panGenomeBreedr","text":"GNU GPLv3","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/index.html","id":"support-and-feedback","dir":"","previous_headings":"","what":"Support and Feedback","title":"panGenomeBreedr","text":"support submission feedback, email maintainer Alexander Kena, PhD alex.kena24@gmail.com","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/beta_carotene.html","id":null,"dir":"Reference","previous_headings":"","what":"beta_carotene — beta_carotene","title":"beta_carotene — beta_carotene","text":"sample trait-predictive KASP genotype data marker QC visualization.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/beta_carotene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"beta_carotene — beta_carotene","text":"","code":"data(beta_carotene)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/beta_carotene.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"beta_carotene — beta_carotene","text":"data frame 768 observations 11 variables: DaughterPlate character KASP Daughter Plate ID. MasterPlate character KASP Master Plate ID. MasterWell character KASP Master Well ID. Call character KASP observed genotype calls. X double FAM fluorescence values. Y double HEX fluorescence values. SNPID character KASP SNP ID. SubjectID character KASP Subject ID. DaughterWell character KASP Daughter Well ID. Group character Predicted genotype positive controls. plates character Derived plate IDs 96-well KASP reaction plate.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_af.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute allele frequencies for a VCF genotype matrix (variant x samples). Chromosome and position may be included in the data. — calc_af","title":"Compute allele frequencies for a VCF genotype matrix (variant x samples). Chromosome and position may be included in the data. — calc_af","text":"Compute allele frequencies VCF genotype matrix (variant x samples). Chromosome position may included data.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_af.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute allele frequencies for a VCF genotype matrix (variant x samples). Chromosome and position may be included in the data. — calc_af","text":"","code":"calc_af(gt, variant_id_col = \"variant_id\", chrom_col = NULL, pos_col = NULL)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_af.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute allele frequencies for a VCF genotype matrix (variant x samples). Chromosome and position may be included in the data. — calc_af","text":"gt matrix data frame variants x samples chromosome position meta data variant. variant_id_col, chrom_col, pos_col character value specifying column names variant IDs, chromosome, positions gt.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_af.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute allele frequencies for a VCF genotype matrix (variant x samples). Chromosome and position may be included in the data. — calc_af","text":"data frame variants reference alternate allele frequencies.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_af.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute allele frequencies for a VCF genotype matrix (variant x samples). Chromosome and position may be included in the data. — calc_af","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Extract variants within a candidate gene and their calculate allele # frequencies variant_region <- query_db(db_path = mini_db_path,                               chrom = \"Chr05\",                               start = 75104537,                               end = 75106403,                               table_name = \"genotypes\",                               gene_name = \"Sobic.005G213600\") |> calc_af(variant_id_col = 'variant_id',        chrom_col = 'chrom',        pos_col = 'pos')  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_bc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the proportion of recurrent parent background (RPP) fully recovered in backcross progenies. — calc_rpp_bc","title":"Calculate the proportion of recurrent parent background (RPP) fully recovered in backcross progenies. — calc_rpp_bc","text":"Calculate proportion recurrent parent background (RPP) fully recovered backcross progenies.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_bc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the proportion of recurrent parent background (RPP) fully recovered in backcross progenies. — calc_rpp_bc","text":"","code":"calc_rpp_bc(   x,   map_file,   map_chr = \"chr\",   map_pos = \"pos\",   map_snp_ids = \"snpid\",   rp = NULL,   rp_num_code = 1,   het_code = 0.5,   na_code = NA,   weighted = TRUE )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_bc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the proportion of recurrent parent background (RPP) fully recovered in backcross progenies. — calc_rpp_bc","text":"x numeric matrix marker genotypes backcross progenies recurrent parent. Markers columns samples rows. map_file data frame map file consisting marker IDs chromosome numbers positions columns. map_chr character value indicating column name chromosome IDs map_file. map_pos character value indicating column name chromosome positions map file. map_snp_ids character value indicating column name SNP IDs map_file. rp integer character value indicating row index sample ID recurrent parent. `NULL` sample first row x used recurrent parent. rp_num_code numeric value indicating coding recurrent parent marker background x. het_code numeric value indicating coding heterozygous marker background x. na_code value indicating missing data x. weighted logical value indicating whether RPP values weighted .","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_bc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the proportion of recurrent parent background (RPP) fully recovered in backcross progenies. — calc_rpp_bc","text":"data frame object comprising RPP per chromosome total RPP sample IDs.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_bc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the proportion of recurrent parent background (RPP) fully recovered in backcross progenies. — calc_rpp_bc","text":"weighted RPP computed sum product relative distance weighting markers genotype scores match recurrent parent. Marker weights obtained half normalized ratio physical distance marker `` marker `+1` total distance ordered markers chromosome. computation excludes heterozygous loci considers chromosome regions fully recovered recurrent parent genetic background.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_bc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the proportion of recurrent parent background (RPP) fully recovered in backcross progenies. — calc_rpp_bc","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) # Create a numeric matrix of genotype scores for 10 markers and 5 samples num_dat <- matrix(c(1, 1, 0.5, 0.5, 1, 1, 1, 1, 1, 1, rep(0, 10),                     1, 1, 0.5, 1, 1, 1, 1, 1, 0, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 0.5 ),                   byrow = TRUE, ncol = 10)  rownames(num_dat) <- c('rp', 'dp', paste0('bc1_', 1:3))  colnames(num_dat) <- c(paste0('S1', '_', c(floor(seq(1000, 10000, len = 5)))),                             paste0('S2', '_', c(floor(seq(1000, 10000, len = 5)))))  # Get map file by parsing SNP IDs map_file <- parse_marker_ns(colnames(num_dat))  # Calculate weighted RPP rpp <- calc_rpp_bc(x = num_dat,                       map_file = map_file,                       map_chr = 'chr',                       map_pos = 'pos',                       map_snp_ids = 'snpid',                       rp = 1,                       rp_num_code = 1,                       weighted = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute theoretical RPP values for any specified backcross generation. — calc_rpp_exp","title":"Compute theoretical RPP values for any specified backcross generation. — calc_rpp_exp","text":"Compute theoretical RPP values specified backcross generation.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute theoretical RPP values for any specified backcross generation. — calc_rpp_exp","text":"","code":"calc_rpp_exp(bc_gen = 1, rpp2n = FALSE)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute theoretical RPP values for any specified backcross generation. — calc_rpp_exp","text":"bc_gen positive integer value indicating backcross generation. rpp2n logical value indicating whether compute theoretical RPP values F1 BC generations bc_gen.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute theoretical RPP values for any specified backcross generation. — calc_rpp_exp","text":"named vector theoretical RPP values.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/calc_rpp_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute theoretical RPP values for any specified backcross generation. — calc_rpp_exp","text":"","code":"# example code # Calculate theoretical RPP values up to BC5 rpp_values <- calc_rpp_exp(bc_gen = 5, rpp2n = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/count_variant_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of variant types in the SQLite database. — count_variant_types","title":"Count the number of variant types in the SQLite database. — count_variant_types","text":"Count number variant types SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/count_variant_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of variant types in the SQLite database. — count_variant_types","text":"","code":"count_variant_types(db_path)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/count_variant_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of variant types in the SQLite database. — count_variant_types","text":"db_path path SQLite PostgreSQL database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/count_variant_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of variant types in the SQLite database. — count_variant_types","text":"data.frame counts variant types.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/count_variant_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of variant types in the SQLite database. — count_variant_types","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Count the number of variant types in database variant_type_count <- count_variant_types(mini_db_path)  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a heatmap to show introgressed loci positions. — cross_qc_annotate","title":"Annotate a heatmap to show introgressed loci positions. — cross_qc_annotate","text":"Annotate heatmap show introgressed loci positions.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a heatmap to show introgressed loci positions. — cross_qc_annotate","text":"","code":"cross_qc_annotate(   x,   map_file,   snp_ids = \"snpid\",   chr = \"chr\",   chr_pos = \"pos\",   parents,   trait_pos,   group_sz = nrow(x) - 2,   pdf = FALSE,   filename = \"background_heatmap\",   legend_title = \"Heatmap_key\",   col_mapping,   col_labels,   alpha = 0.9,   text_size = 12,   text_scale_fct = 0.5,   width = 10.5,   height = 8.5,   ... )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a heatmap to show introgressed loci positions. — cross_qc_annotate","text":"x numeric matrix marker IDs columns sample IDs row names. map_file data frame map file consisting SNP IDs chromosome numbers positions columns. snp_ids character value indicating column name marker IDs x. chr character value indicating column name chromosome IDs x. chr_pos character value indicating column name chromosome positions x. parents character vector length = 2 IDs parents. trait_pos list object components correspond start end positions trait loci annotate heapmap. group_sz positive integer value indicating batch size progenies include heatmap. pdf logical value indicating whether save plot pdf graphic device TRUE output plot R FALSE. filename character value path file name saving pdf. legend_title character value specifying plot legend title. col_mapping character vector length = 6 heatmap color mapping. col_labels character vector length = 6 labels corresponding color mapping. alpha numeric value 0 1 modifying opacity colors. text_size numeric value setting text size. text_scale_fct numeric value scaling text size. default value `50%` defined text size. width numeric value width pdf device. height numeric value height pdf device. ... valid arguments can passed ggplot2.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_annotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate a heatmap to show introgressed loci positions. — cross_qc_annotate","text":"graphic object ggplot.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_annotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate a heatmap to show introgressed loci positions. — cross_qc_annotate","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) # Create a numeric matrix of genotype scores for 10 markers and 5 samples num_dat <- matrix(c(rep(1, 10), rep(0, 10),                     1, 1, 0.5, 1, 1, 1, 1, 1, 0, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 0.5 ),                   byrow = TRUE, ncol = 10)  rownames(num_dat) <- c('rp', 'dp', paste0('bc1_', 1:3)) colnames(num_dat) <- paste0('S1', '_', c(floor(seq(1000, 10000, len = 8)),                                          15000, 20000))  # Get map file by parsing SNP IDs map_file <- parse_marker_ns(colnames(num_dat))  # Annotate a heatmap to show trait loci positions cross_qc_annotate(x = num_dat,                 map_file = map_file,                 snp_ids = 'snpid',                 chr = 'chr',                 chr_pos = 'pos',                 parents = c('rp', 'dp'),                 trait_pos = list(loc1 = c(start = 2900, end = 4200),                 loc2 = c(start = 14200, end = 15800)),                 text_scale_fct = 0.5,                 group_sz = 3L,                 pdf = FALSE,                 legend_title = 'BC1',                 alpha = 0.8,                 text_size = 15) #> $Batch1  #>   # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines. — cross_qc_ggplot","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines. — cross_qc_ggplot","text":"Create heatmap visualize compare genetic genetic backgrounds genotypes/lines.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines. — cross_qc_ggplot","text":"","code":"cross_qc_ggplot(   x,   map_file,   snp_ids = \"snpid\",   chr = \"chr\",   chr_pos = \"pos\",   parents,   group_sz = nrow(x) - 2,   pdf = FALSE,   filename = \"background_heatmap\",   legend_title = \"Heatmap_key\",   col_mapping,   col_labels,   alpha = 1,   text_size = 12,   width = 10.5,   height = 8.5,   ... )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines. — cross_qc_ggplot","text":"x numeric matrix marker IDs columns sample IDs row names. map_file data frame map file consisting SNP IDs chromosome numbers positions columns. snp_ids character value indicating column name marker IDs x. chr character value indicating column name chromosome IDs x. chr_pos character value indicating column name chromosome positions x. parents character vector length = 2 IDs parents. group_sz positive integer value indicating batch size progenies include heatmap. pdf logical value indicating whether save plot pdf graphic device TRUE output plot R FALSE. filename character value path file name saving pdf. legend_title character value specifying plot legend title. col_mapping character vector length = 6 heatmap color mapping. col_labels character vector length = 6 labels corresponding color mapping. alpha numeric value 0 1 modifying opacity colors. text_size numeric value setting text size. width numeric value width pdf device. height numeric value height pdf device. ... valid arguments can passed ggplot2.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines. — cross_qc_ggplot","text":"graphic object ggplot.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines. — cross_qc_ggplot","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) # Create a numeric matrix of genotype scores for 10 markers and 5 samples num_dat <- matrix(c(rep(1, 10), rep(0, 10),                     1, 1, 0.5, 1, 1, 1, 1, 1, 0, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 0.5 ),                   byrow = TRUE, ncol = 10)  rownames(num_dat) <- c('rp', 'dp', paste0('bc1_', 1:3)) colnames(num_dat) <- paste0('S1', '_', c(floor(seq(1000, 10000, len = 8)),                                          15000, 20000))  # Get map file by parsing SNP IDs map_file <- parse_marker_ns(colnames(num_dat))  # Create a heatmap that compares the parents to progenies cross_qc_ggplot(x = num_dat,                 map_file = map_file,                 snp_ids = 'snpid',                 chr = 'chr',                 chr_pos = 'pos',                 value = 'value',                 parents = c('rp', 'dp'),                 group_sz = 3L,                 pdf = FALSE,                 legend_title = 'Heatmap_key',                 alpha = 0.8,                 text_size = 14) #> $Batch1  #>   # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines with or without annotation for introgressed loci. — cross_qc_heatmap","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines with or without annotation for introgressed loci. — cross_qc_heatmap","text":"Create heatmap visualize compare genetic genetic backgrounds genotypes/lines without annotation introgressed loci.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines with or without annotation for introgressed loci. — cross_qc_heatmap","text":"","code":"cross_qc_heatmap(   x,   map_file,   snp_ids = \"snpid\",   chr = \"chr\",   chr_pos = \"pos\",   parents,   trait_pos = NULL,   group_sz = nrow(x) - 2,   pdf = FALSE,   filename = \"background_heatmap\",   legend_title = \"Heatmap_key\",   col_mapping,   col_labels,   panel_fill = \"grey80\",   panel_col = \"white\",   alpha = 0.9,   text_size = 12,   text_scale_fct = 0.5,   width = 9,   height = 6.5,   label_offset = -1,   ... )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines with or without annotation for introgressed loci. — cross_qc_heatmap","text":"x numeric matrix marker IDs columns sample IDs row names. map_file data frame map file consisting SNP IDs chromosome numbers positions columns. snp_ids character value indicating column name marker IDs x. chr character value indicating column name chromosome IDs x. chr_pos character value indicating column name chromosome positions x. parents character vector length = 2 IDs parents. trait_pos list object components correspond chromosome number, start end positions trait loci annotate heapmap. group_sz positive integer value indicating batch size progenies include heatmap. pdf logical value indicating whether save plot pdf graphic device TRUE output plot R FALSE. filename character value path file name saving pdf. legend_title character value specifying plot legend title. col_mapping character vector length = 6 heatmap color mapping. col_labels character vector length = 6 labels corresponding color mapping. panel_fill character value setting panel background fill color. panel_col character value setting panel background border color. alpha numeric value 0 1 modifying opacity colors. text_size numeric value setting text size. text_scale_fct numeric value scaling text size. default value `50%` defined text size. width numeric value width pdf device. height numeric value height pdf device. label_offset numeric value indicating position trait loci text labels heatmap. positioned donor parent default. ... valid arguments can passed ggplot2.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines with or without annotation for introgressed loci. — cross_qc_heatmap","text":"ggplot graphical object.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/cross_qc_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap to visualize and compare the genetic genetic backgrounds of genotypes/lines with or without annotation for introgressed loci. — cross_qc_heatmap","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) # Create a numeric matrix of genotype scores for 10 markers and 5 samples num_dat <- matrix(c(rep(1, 10), rep(0, 10),                     1, 1, 0.5, 1, 1, 1, 1, 1, 0, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 0.5 ),                   byrow = TRUE, ncol = 10)  rownames(num_dat) <- c('rp', 'dp', paste0('bc1_', 1:3)) colnames(num_dat) <- paste0('S1', '_', c(floor(seq(1000, 10000, len = 8)),                                          15000, 20000))  # Get map file by parsing SNP IDs map_file <- parse_marker_ns(colnames(num_dat))  # Annotate a heatmap to show trait loci positions cross_qc_heatmap(x = num_dat,                 map_file = map_file,                 snp_ids = 'snpid',                 chr = 'chr',                 chr_pos = 'pos',                 parents = c('rp', 'dp'),                 trait_pos = list(loc1 = c(chr = 1, start = 2900, end = 4200),                 loc2 = c(chr = 1, start = 14200, end = 15800)),                 text_scale_fct = 0.5,                 group_sz = 3L,                 pdf = FALSE,                 legend_title = 'BC1',                 alpha = 0.8,                 text_size = 15) #> $Batch1  #>   # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/extract_variant.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract putative causal variants within a candidate gene from a tabix-indexed snpEff annotated VCF file. — extract_variant","title":"Extract putative causal variants within a candidate gene from a tabix-indexed snpEff annotated VCF file. — extract_variant","text":"Extract putative causal variants within candidate gene tabix-indexed snpEff annotated VCF file.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/extract_variant.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract putative causal variants within a candidate gene from a tabix-indexed snpEff annotated VCF file. — extract_variant","text":"","code":"extract_variant(   cand_gene_id,   gff_path,   vcf_dir,   vcf_file,   output_path = tempdir(),   outfile_suffix = \"variants\" )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/extract_variant.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract putative causal variants within a candidate gene from a tabix-indexed snpEff annotated VCF file. — extract_variant","text":"cand_gene_id character value specifying candidate gene ID. gff_path character value indicating path GFF file, including complete file name. vcf_dir character value indicating path directory containing snpEff annotated VCF files. vcf_file character value indicating file name snpEff annotated VCF file including .vcf.gz extension. output_path character value indicating path directory saving extracted variants. outfile_suffix character value indicating file name used saving extracted variants.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/extract_variant.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract putative causal variants within a candidate gene from a tabix-indexed snpEff annotated VCF file. — extract_variant","text":"VCF file containing extracted variants cand_gene_id.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/extract_variant.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract putative causal variants within a candidate gene from a tabix-indexed snpEff annotated VCF file. — extract_variant","text":"wrapper function operates tabix-indexed snpEff annotated VCF files. However, tabix-indexed VCF file available, can create one inputted VCF file. file names snpEff annotated VCF files expected consist three components: common prefix, chromosome tag common suffix.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/extract_variant.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract putative causal variants within a candidate gene from a tabix-indexed snpEff annotated VCF file. — extract_variant","text":"","code":"# example code # \\donttest{ library(panGenomeBreedr)  # Work from the tempdir vcf_dir <- tempdir()  # Google drive link to gff3 file flink1 <- \"https://drive.google.com/file/d/1XjYyJ2JLywbbniIU6oUIIxAmEBKfmHpz/view?usp=sharing\"  # Download gff3 file to tempdir() gff3 <- folder_download_gd(drive_link = flink1,                            output_path = vcf_dir,                            is.folder = FALSE) #> ℹ Not logged in as any specific Google user. #> File downloaded: #> • Sbicolor_730_v5.1.gene.gff3 <id: 1XjYyJ2JLywbbniIU6oUIIxAmEBKfmHpz> #> Saved locally as: #> • /var/folders/n_/swy48fpx1w76xyqp3qx2prz00000gn/T//RtmpFjtlQG/Sbicolor_730_v5.1.gene.gff3  # Google drive link to indel snpEff annotated vcf file on Chr05 flink2 <- \"https://drive.google.com/file/d/1LiOeDsfIwbsCuHbw9rCJ1FLOZqICTrfs/view?usp=sharing\"  # Download indel snpEff annotated vcf file to tempdir() vcf_file_indel <- folder_download_gd(drive_link = flink2,                                      output_path = vcf_dir,                                      is.folder = FALSE) #> ℹ Not logged in as any specific Google user. #> File downloaded: #> • Sorghum_d8.noduplicates.Chr05.indel._markernamesadded_imputed_snpeff.vcf.gz #>   <id: 1LiOeDsfIwbsCuHbw9rCJ1FLOZqICTrfs> #> Saved locally as: #> • /var/folders/n_/swy48fpx1w76xyqp3qx2prz00000gn/T//RtmpFjtlQG/Sorghum_d8.noduplicates.Chr05.indel._markernamesadded_imputed_snpeff.vcf.gz # View downloaded files in tempdir # list.files(vcf_dir)  # InDel variant extraction for lgs1 (Sobic.005G213600) extract_variant(cand_gene_id = 'Sobic.005G213600',                 gff_path = gff3,                 vcf_dir = vcf_dir,                 vcf_file = basename(vcf_file_indel),                 output_path = vcf_dir,                 outfile_suffix = 'lgs_variants_indel')  # Clean tempdir after variant extraction # unlink(vcf_dir, recursive = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/filter_by_af.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter extracted variants based on alternate allele frequency. — filter_by_af","title":"Filter extracted variants based on alternate allele frequency. — filter_by_af","text":"Filter extracted variants based alternate allele frequency.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/filter_by_af.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter extracted variants based on alternate allele frequency. — filter_by_af","text":"","code":"filter_by_af(   gt,   variant_id_col = \"variant_id\",   chrom_col = \"chrom\",   pos_col = \"pos\",   min_af = 0,   max_af = 1 )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/filter_by_af.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter extracted variants based on alternate allele frequency. — filter_by_af","text":"gt matrix data frame variants x samples chromosome position meta data variant. variant_id_col, chrom_col, pos_col character value specifying column names variant IDs, chromosome, positions gt. min_af, max_af numeric value indicating minimum maximum allele frequency thresholds filtering variants.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/filter_by_af.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter extracted variants based on alternate allele frequency. — filter_by_af","text":"data frame filtered variants reference alternate  allele frequencies.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/filter_by_af.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter extracted variants based on alternate allele frequency. — filter_by_af","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Extract variants within a candidate gene and filter by allele frequency variant_region <- query_db(db_path = mini_db_path,                               chrom = \"Chr05\",                               start = 75104537,                               end = 75106403,                               table_name = \"genotypes\",                               gene_name = \"Sobic.005G213600\") |> filter_by_af(variant_id_col = 'variant_id',              chrom_col = 'chrom',              pos_col = 'pos',              min_af = 0.01,              max_af = 0.99)  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_indels.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and subset InDel markers from a marker panel. — find_indels","title":"Identify and subset InDel markers from a marker panel. — find_indels","text":"Identify subset InDel markers marker panel.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_indels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and subset InDel markers from a marker panel. — find_indels","text":"","code":"find_indels(x, rp_row, dp_row, indel_sym = \"-\", sep = \":\", na_code = NA)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_indels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and subset InDel markers from a marker panel. — find_indels","text":"x data matrix frame markers columns samples rows. rp_row, dp_row integer character value indicating row index name Parent 1 2. indel_sym character value indicates symbols deletion. sep character used separator genotype calls, default colon. na_code value indicating missing data x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_indels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and subset InDel markers from a marker panel. — find_indels","text":"list object following components: 1) data frame InDel loci marker panel present. 2) data frame non-InDel markers marker panel.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_indels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify and subset InDel markers from a marker panel. — find_indels","text":"","code":"# example code library(panGenomeBreedr)  # Marker data dat <- data.frame(snp1 = c('C:C', 'A:A', 'C:A', 'C:A'),                   snp2 = c('C:C', '-:-', 'C:C', 'C:C'),                   snp3 = c('T:T', 'C:C', 'C:T', 'C:T'),                   snp4 = c('G:G', '-:-', 'G:-', 'G:G'),                   snp5 = c('T:T', 'A:A', 'T:A', 'T:A'),                   row.names = c('rp', 'dp', 'art_het1', 'art_het2'))  # Find InDel loci geno_indel <- find_indels(x = dat,                           rp_row = 1,                           dp_row = 2)$geno_indel"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_lines.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts lines that have a combination of favorable alleles across target loci. — find_lines","title":"Extracts lines that have a combination of favorable alleles across target loci. — find_lines","text":"Extracts lines combination favorable alleles across target loci.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_lines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts lines that have a combination of favorable alleles across target loci. — find_lines","text":"","code":"find_lines(mat, present = character(), absent = character())"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_lines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts lines that have a combination of favorable alleles across target loci. — find_lines","text":"mat binary matrix/data frame 1s 0s. Rows = lines, Columns = target loci. present Character vector column names must 1 (present). absent Character vector column names must 0 (absent).","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_lines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts lines that have a combination of favorable alleles across target loci. — find_lines","text":"Character vector lines matching intersection criteria.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_lines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts lines that have a combination of favorable alleles across target loci. — find_lines","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Marker genotype data geno <- data.frame(SNP1 = c(\"A:A\", \"A:G\", \"G:G\", \"A:A\"),                    SNP2 = c(\"C:C\", \"C:T\", \"T:T\", \"C:T\"),                    SNP3 = c(\"G:G\", \"G:G\", \"A:G\", \"A:A\"),                    row.names = c(\"Line1\", \"Line2\", \"Line3\", \"Line4\"))  # Trait predictive markers meta data marker_info <- data.frame(qtl_markers = paste0('SNP', 1:3),                           fav_alleles = c('A', 'C', 'G'),                           alt_alleles = c('G', 'T', 'A'))  # Select lines where genotype is either homozygous for favorable alleles at all loci foreground_select(geno_data = geno,                   fore_marker_info = marker_info,                   fore_marker_col = 'qtl_markers',                   fav_allele_col = 'fav_alleles',                   alt_allele_col = 'alt_alleles',                   select_type = \"homo\") |>                    find_lines(present = colnames(geno)) #> [1] \"Line1\"    # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_unexp_homs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find loci with unexpected homozygous genotype calls for artificial heterozygotes. — find_unexp_homs","title":"Find loci with unexpected homozygous genotype calls for artificial heterozygotes. — find_unexp_homs","text":"Find loci unexpected homozygous genotype calls artificial heterozygotes.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_unexp_homs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find loci with unexpected homozygous genotype calls for artificial heterozygotes. — find_unexp_homs","text":"","code":"find_unexp_homs(x, rp_row, dp_row, na_code = NA)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_unexp_homs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find loci with unexpected homozygous genotype calls for artificial heterozygotes. — find_unexp_homs","text":"x data matrix frame markers columns samples rows. rp_row, dp_row integer character value indicating row index name Parent 1 2. na_code value indicating missing data x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_unexp_homs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find loci with unexpected homozygous genotype calls for artificial heterozygotes. — find_unexp_homs","text":"list object following components: 1) data frame loci unexpected genotype calls artificial heterozygotes  present. 2) data frame loci expected genotype calls artificial heterozygotes.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_unexp_homs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find loci with unexpected homozygous genotype calls for artificial heterozygotes. — find_unexp_homs","text":"Artificial heterozygotes expected show heterozygosity polymorphic loci parents.Use wrapper function detect loci follow prediction.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/find_unexp_homs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find loci with unexpected homozygous genotype calls for artificial heterozygotes. — find_unexp_homs","text":"","code":"# example code library(panGenomeBreedr) # Marker data dat <- data.frame(snp1 = c('C:C', 'A:A', 'C:A', 'C:A'),                   snp2 = c('C:C', '-:-', 'C:C', 'C:C'),                   snp3 = c('T:T', 'C:C', 'C:T', 'C:T'),                   snp4 = c('G:G', '-:-', 'G:-', 'G:G'),                   snp5 = c('T:T', 'A:A', 'T:A', 'T:A'),                   row.names = c('rp', 'dp', 'art_het1', 'art_het2'))  # Check for unexpected homozygous genotypes homs_unexp <- find_unexp_homs(x = dat,                               rp_row = 1,                               dp_row = 2)$geno_unexp"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/folder_download_gd.html","id":null,"dir":"Reference","previous_headings":"","what":"Download files in a shared Google Drive folder without restrictions. — folder_download_gd","title":"Download files in a shared Google Drive folder without restrictions. — folder_download_gd","text":"Download files shared Google Drive folder without restrictions.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/folder_download_gd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download files in a shared Google Drive folder without restrictions. — folder_download_gd","text":"","code":"folder_download_gd(drive_link, output_path = tempdir(), is.folder = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/folder_download_gd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download files in a shared Google Drive folder without restrictions. — folder_download_gd","text":"drive_link character value indicating shareable Google Drive link. output_path character value indicating path directory saving downloaded files. .folder logical value indicating link folder file. Set `FALSE` link shareable file.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/folder_download_gd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download files in a shared Google Drive folder without restrictions. — folder_download_gd","text":"list vector containing path directory containing downloaded files Google Drive.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/folder_download_gd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download files in a shared Google Drive folder without restrictions. — folder_download_gd","text":"","code":"# example code # \\donttest{ library(panGenomeBreedr) f_link <- \"https://drive.google.com/drive/folders/1BotxaUb5emlrtgo473db3gDTUCLzKi70?usp=sharing\" folder_path <- folder_download_gd(drive_link = f_link) #> ℹ Not logged in as any specific Google user. #> File downloaded: #> • BR Field layout <id: 12JYxAz8OCmRLS1WIa0q9ohTB50wQAks-EclJja5l-4U> #> Saved locally as: #> • /var/folders/n_/swy48fpx1w76xyqp3qx2prz00000gn/T//RtmpFjtlQG/Work Plan 2025/BR Field layout.xlsx #> File downloaded: #> • BR workplan for 2025 <id: 1ghJuIyhzRdVquSXepUh64I99xNcj2wvtH4tV5Qjsf_k> #> Saved locally as: #> • /var/folders/n_/swy48fpx1w76xyqp3qx2prz00000gn/T//RtmpFjtlQG/Work Plan 2025/BR workplan for 2025.pptx # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/foreground_select.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify lines that possess favorable alleles for target loci using trait predictive markers. — foreground_select","title":"Identify lines that possess favorable alleles for target loci using trait predictive markers. — foreground_select","text":"Identify lines possess favorable alleles target loci using trait predictive markers.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/foreground_select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify lines that possess favorable alleles for target loci using trait predictive markers. — foreground_select","text":"","code":"foreground_select(   geno_data,   fore_marker_info,   fore_marker_col,   fav_allele_col,   alt_allele_col,   select_type = c(\"homo\", \"hetero\", \"both\"),   sep = \":\" )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/foreground_select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify lines that possess favorable alleles for target loci using trait predictive markers. — foreground_select","text":"geno_data data frame matrix marker genotype data lines rows markers columns. fore_marker_info data frame meta data trait-predictive markers consisting marker names, favorable alternate alleles variables. fore_marker_col character value specifying column name trait-predictive markers fore_marker_info. fav_allele_col character value specifying column name favorable allele fore_marker_info. alt_allele_col character value specifying column name alternate allele fore_marker_info. select_type character value one three options: `homo` select lines homozygous favorable allele; `hetero` select lines heterozygous; `` select favorable homozygotes heterozygotes. sep character value representing separator used genotype calling.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/foreground_select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify lines that possess favorable alleles for target loci using trait predictive markers. — foreground_select","text":"binary data frame conversion original marker genotype data presence(1s) absence(0s) favorable alleles target loci.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/foreground_select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify lines that possess favorable alleles for target loci using trait predictive markers. — foreground_select","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Marker genotype data geno <- data.frame(SNP1 = c(\"A:A\", \"A:G\", \"G:G\", \"A:A\"),                    SNP2 = c(\"C:C\", \"C:T\", \"T:T\", \"C:T\"),                    SNP3 = c(\"G:G\", \"G:G\", \"A:G\", \"A:A\"),                    row.names = c(\"Line1\", \"Line2\", \"Line3\", \"Line4\"))  # Trait predictive markers meta data marker_info <- data.frame(qtl_markers = paste0('SNP', 1:3),                           fav_alleles = c('A', 'C', 'G'),                           alt_alleles = c('G', 'T', 'A'))  # Select lines where genotype is either homozygous for favorable alleles at all loci foreground_select(geno_data = geno,                   fore_marker_info = marker_info,                   fore_marker_col = 'qtl_markers',                   fav_allele_col = 'fav_alleles',                   alt_allele_col = 'alt_alleles',                   select_type = \"homo\") #>       SNP1 SNP2 SNP3 #> Line1    1    1    1 #> Line2    0    0    1 #> Line3    0    0    0 #> Line4    1    0    0  # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gene_coord_gff.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the genomic range of a candidate gene using the Sobic ID from a gff file. — gene_coord_gff","title":"Get the genomic range of a candidate gene using the Sobic ID from a gff file. — gene_coord_gff","text":"Get genomic range candidate gene using Sobic ID gff file.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gene_coord_gff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the genomic range of a candidate gene using the Sobic ID from a gff file. — gene_coord_gff","text":"","code":"gene_coord_gff(gene_name, gff_path)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gene_coord_gff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the genomic range of a candidate gene using the Sobic ID from a gff file. — gene_coord_gff","text":"gene_name character value indicating Sobic ID candidate gene. gff_path character value specifying path gff3 file. GZ compressed files URL file paths acceptable.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gene_coord_gff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the genomic range of a candidate gene using the Sobic ID from a gff file. — gene_coord_gff","text":"list object three components indicating chromosome, start end coordinates candidate gene.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gene_coord_gff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the genomic range of a candidate gene using the Sobic ID from a gff file. — gene_coord_gff","text":"","code":"# \\donttest{ # example code  # Path to GFF3 file gff_path <- \"https://raw.githubusercontent.com/awkena/panGB/main/Sbicolor_730_v5.1.gene.gff3.gz\" gene_coord_gff(gene_name = \"Sobic.005G213600\",                gff_path = gff_path) #> $chrom #> [1] \"Chr05\" #>  #> $start #> [1] 75104537 #>  #> $end #> [1] 75106403 #>   # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/geno_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify SNP loci with potential genotype call errors. — geno_error","title":"Identify SNP loci with potential genotype call errors. — geno_error","text":"Identify SNP loci potential genotype call errors.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/geno_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify SNP loci with potential genotype call errors. — geno_error","text":"","code":"geno_error(x, rp_row, dp_row, sep = \":\", data_type = c(\"kasp\", \"agriplex\"))"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/geno_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify SNP loci with potential genotype call errors. — geno_error","text":"x data frame genotype calls columns SNPs samples rows. Row names unique sample names. rp_row integer character value indication row index name recurrent Parent 1. dp_row integer character value indicating row index name donor Parent 2. sep character used separator genotype calls, default colon. data_type character value indicating data source; either `kasp` `agriplex`.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/geno_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify SNP loci with potential genotype call errors. — geno_error","text":"list object following components: 1) data frame loci genotype call errors present. 2) data frame loci genotype errors.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/geno_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify SNP loci with potential genotype call errors. — geno_error","text":"","code":"# example code # \\donttest{ library(panGenomeBreedr)  # Marker data with errors in snp1 and snp4 dat <- data.frame(snp1 = c('C:A', 'A:A', 'C:A', 'C:T'),                   snp2 = c('C:C', 'G:G', 'C:C', 'C:C'),                   snp3 = c('C:T', 'C:C', 'C:T', 'C:T'),                   snp4 = c('G:G', '-:-', 'G:-', 'G:A'),                   snp5 = c('T:T', 'A:A', 'T:A', 'T:A'),                   row.names = c('rp', 'dp', 'ind_1', 'ind_2'))  # Check for genotype call  error for each SNP geno_mat <- geno_error(x = dat,                   rp_row = 1,                   dp_row = 2,                   sep = ':',                   data_type = 'kasp') # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_alleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Get SNP or InDel alleles and possible genotypes from genotype calls in KASP data. — get_alleles","title":"Get SNP or InDel alleles and possible genotypes from genotype calls in KASP data. — get_alleles","text":"Get SNP InDel alleles possible genotypes genotype calls KASP data.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_alleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get SNP or InDel alleles and possible genotypes from genotype calls in KASP data. — get_alleles","text":"","code":"get_alleles(x, sep = \":\", data_type = c(\"kasp\", \"agriplex\"))"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_alleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get SNP or InDel alleles and possible genotypes from genotype calls in KASP data. — get_alleles","text":"x character vector KASP genotype calls one reaction plate. sep character used separator genotype calls, default colon. data_type character value indicating data source; either `kasp` `agriplex`.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_alleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get SNP or InDel alleles and possible genotypes from genotype calls in KASP data. — get_alleles","text":"list object `length = 2` consisting marker alleles possible genotypes x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_alleles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get SNP or InDel alleles and possible genotypes from genotype calls in KASP data. — get_alleles","text":"","code":"# example code # \\donttest{ # Simulate a typical KASP genotype call set.seed(123) x <- sample(c(\"A:A\", \"A:-\", \"-:-\", \"Uncallable\", \"?\"),             size = 96,             replace = TRUE)  # Assign NTC wells x[c(88, 96)] <- 'NTC'  # Get alleles and expected genotypes alleles <- get_alleles(x = x, data_type = 'kasp') # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_google_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the folder or file ID from a Google Drive shareable link. — get_google_id","title":"Get the folder or file ID from a Google Drive shareable link. — get_google_id","text":"Get folder file ID Google Drive shareable link.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_google_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the folder or file ID from a Google Drive shareable link. — get_google_id","text":"","code":"get_google_id(drive_link, is.folder = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_google_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the folder or file ID from a Google Drive shareable link. — get_google_id","text":"drive_link character value indicating shareable Google Drive link. .folder logical value indicating link folder file. Set `FALSE` link shareable file. #' @examples # example code library(panGenomeBreedr) folder_link <- \"https://drive.google.com/drive/folders/1BotxaUb5emlrtgo473db3gDTUCLzKi70?usp=sharing\" folder_id <- get_google_id(drive_link = folder_link)","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/get_google_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the folder or file ID from a Google Drive shareable link. — get_google_id","text":"character object Google Drive folder file ID.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gg_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data matrix for genotypes to a long format data frame. — gg_dat","title":"Convert data matrix for genotypes to a long format data frame. — gg_dat","text":"Convert data matrix genotypes long format data frame.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gg_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data matrix for genotypes to a long format data frame. — gg_dat","text":"","code":"gg_dat(   num_mat,   map_file,   map_pos = \"pos\",   map_snp_ids = \"snpid\",   map_chr = \"chr\" )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gg_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data matrix for genotypes to a long format data frame. — gg_dat","text":"num_mat numeric character data matrix marker IDs columns sample IDs row names. map_file data frame map file consisting SNP IDs chromosome numbers positions columns. map_pos character value indicating column name chromosome positions map file. map_snp_ids character value indicating column name SNP IDs map_file. map_chr character value indicating column name chromosome IDs map_file.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gg_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data matrix for genotypes to a long format data frame. — gg_dat","text":"long format data frame object.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/gg_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data matrix for genotypes to a long format data frame. — gg_dat","text":"","code":"# \\donttest{  # example code library(panGenomeBreedr) # Create a numeric matrix of genotype scores for 10 markers and 5 samples num_dat <- matrix(c(rep(1, 10), rep(0, 10),                     1, 1, 0.5, 1, 1, 1, 1, 1, 0, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 1,                     1, 1, 0, 1, 1, 1, 1, 1, 1, 0.5 ),                   byrow = TRUE, ncol = 10)  rownames(num_dat) <- c('rp', 'dp', paste0('bc1_', 1:3)) colnames(num_dat) <- paste0('S1', '_', c(floor(seq(1000, 10000, len = 8)),                                          15000, 20000))  # Get map file by parsing SNP IDs map_file <- parse_marker_ns(colnames(num_dat))   # Convert num_geno to a long format data frame  df <- gg_dat(num_mat = num_dat,               map_file = map_file) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/hapmap_ns_fmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Format marker names to comply with the Hapmap convention. — hapmap_ns_fmt","title":"Format marker names to comply with the Hapmap convention. — hapmap_ns_fmt","text":"Format marker names comply Hapmap convention.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/hapmap_ns_fmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format marker names to comply with the Hapmap convention. — hapmap_ns_fmt","text":"","code":"hapmap_ns_fmt(   x,   map_file,   snpid_col = \"SNP_name\",   chr_col = \"chr\",   pos_col = \"pos\",   kasp_prefix = \"snpSB\",   scaffold_prefix = \"Sbv\" )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/hapmap_ns_fmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format marker names to comply with the Hapmap convention. — hapmap_ns_fmt","text":"x character vector marker IDs formated. map_file data frame map file consisting marker IDs chromosome numbers positions columns. snpid_col character value indicating column name marker IDs map_file. chr_col character value indicating column name chromosome IDs map_file. pos_col character value indicating column name chromosome positions map_file. kasp_prefix character value indicating KASP marker prefix crop species. scaffold_prefix character value indicating KASP marker prefix crop species.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/hapmap_ns_fmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format marker names to comply with the Hapmap convention. — hapmap_ns_fmt","text":"character vector markers names formated comply Hapmap format.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/hapmap_ns_fmt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format marker names to comply with the Hapmap convention. — hapmap_ns_fmt","text":"experimental function, use caution. can used create marker IDs can easily parsed map file using `parse_marker_ns()` function. function may format inputted marker names x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/hapmap_ns_fmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format marker names to comply with the Hapmap convention. — hapmap_ns_fmt","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Marker IDs snps <- c('snpSB00072', 'snpSB00106', 'snpSB00109', 'Sbv3.1_01_68028666I',           'Sbv3.1_02_67884158W')  # Map file for SNPs map_file <- data.frame(snpid = snps,                        chr = c(2, 5, 5, 1, 2),                        pos = c(61811307, 838874, 1730282, NA, NA))  # Format marker IDs to hapmap format ns_new <- hapmap_ns_fmt(x = snps,                         map_file = map_file,                         snpid_col = 'snpid',                         chr_col = 'chr',                         pos_col = 'pos',                         kasp_prefix = 'snpSB',                         scaffold_prefix = 'Sbv') # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Color-code KASP genotype calls based on LGC genomics colors for HEX and FAM. — kasp_color","title":"Color-code KASP genotype calls based on LGC genomics colors for HEX and FAM. — kasp_color","text":"Color-code KASP genotype calls based LGC genomics colors HEX FAM.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color-code KASP genotype calls based on LGC genomics colors for HEX and FAM. — kasp_color","text":"","code":"kasp_color(   x,   subset = \"MasterPlate\",   sep = \":\",   geno_call = \"Call\",   uncallable = \"Uncallable\",   unused = \"?\",   blank = \"NTC\",   others = c(\"Missing\", \"Bad\", \"Dupe\", \"Over\", \"Short\"),   assign_cols = c(FAM = \"blue\", HEX = \"gold\", het = \"forestgreen\") )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color-code KASP genotype calls based on LGC genomics colors for HEX and FAM. — kasp_color","text":"x data frame KASP genotype calls one multiple plates. subset character value indicating column name taking subsets x processing; default `MasterPlate`. sep character used separator genotype calls, default colon. geno_call character indicating column name used genotype calls x. uncallable character indicating `Uncallable` genotype calls, present. unused character indicating `?` genotype calls, present. blank character value indicating `Template Controls (NTC)` genotype calls. others character vector indicating non-genotype calls KASP genotype calls, present. may include `'Missing', 'Bad', 'Dupe'`, `'', 'Short'`. assign_cols named character vector `length = 3` assigning colors FAM, HEX heterozygous genotype groups.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color-code KASP genotype calls based on LGC genomics colors for HEX and FAM. — kasp_color","text":"list object subset unit component data frames.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_color.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Color-code KASP genotype calls based on LGC genomics colors for HEX and FAM. — kasp_color","text":"experimental function. default values arguments function based LGC Genomics conventions including color codes FAM HEX fluorescence.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_color.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color-code KASP genotype calls based on LGC genomics colors for HEX and FAM. — kasp_color","text":"","code":"# example code library(panGenomeBreedr) # \\donttest{ dat1 <- kasp_color(x = panGenomeBreedr::kasp_dat,                    subset = 'MasterPlate',                    sep = ':',                    geno_call = 'Call',                    uncallable = 'Uncallable',                    unused = '?',                    blank = 'NTC') #> Marker in Plate SE-24-0392_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0392_P01_d1 failed! Check genotype calls. #> Marker in Plate SE-24-0395_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0395_P01_d1 failed! Check genotype calls. #> Marker in Plate SE-24-0397_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0397_P01_d1 failed! Check genotype calls. # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"kasp_dat — kasp_dat","title":"kasp_dat — kasp_dat","text":"sample KASP genotype data marker QC visualization.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kasp_dat — kasp_dat","text":"","code":"data(kasp_dat)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_dat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"kasp_dat — kasp_dat","text":"data frame 1344 observations 11 variables: DaughterPlate character KASP Daughter Plate ID. MasterPlate character KASP Master Plate ID. MasterWell character KASP Master Well ID. Call character KASP observed genotype calls. X double FAM fluorescence values. Y double HEX fluorescence values. SNPID character KASP SNP ID. SubjectID character KASP Subject ID. CustomerID character Customer unique ID samples. DaughterWell character KASP Daughter Well ID. Group character Predicted genotype positive controls.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_marker_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Design KASP markers based on causal variants. — kasp_marker_design","title":"Design KASP markers based on causal variants. — kasp_marker_design","text":"Design KASP markers based causal variants.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_marker_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design KASP markers based on causal variants. — kasp_marker_design","text":"","code":"kasp_marker_design(   vcf_file = NULL,   gt_df = NULL,   variant_id_col = \"variant_id\",   chrom_col = \"chrom\",   pos_col = \"pos\",   ref_al_col = \"ref\",   alt_al_col = \"alt\",   geno_start = 7,   marker_ID,   chr = NULL,   genome_file,   plot_draw = TRUE,   plot_file = tempdir(),   region_name = \"loc_1\",   maf = 0.05 )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_marker_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design KASP markers based on causal variants. — kasp_marker_design","text":"vcf_file Path vcf file containing identified variants. gt_df data frame matrix containing meta data identified variants sample VCF genotype calls. variants rows samples columns. variant_id_col, chrom_col, pos_col character value specifying column names variant IDs, chromosome, positions `gt_df` `vcf_file`. ref_al_col, alt_al_col, character value specifying column names reference alternate alleles, respectively `gt_df` `vcf_file`. geno_start integer value specifying column index number start sample genotypes `gt_df` `vcf_file`. marker_ID Designated name variant marker design. Name must contained `gt_df` `vcf_file`. chr character value representation chromosome description `genome_file`. Providing helps save memory R. genome_file Path reference genome file fasta format, either compressed (.gz) decompressed. plot_draw logical value indicating whether plot 100 bp upstream downstream KASP sequence alignment reference genome. plot_file Path save sequence alignment `plot_draw = TRUE`. region_name n optional character value assigned region name. maf numeric value 0 1 representing minor allele frequency variant subset.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_marker_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design KASP markers based on causal variants. — kasp_marker_design","text":"data frame containing information required KASP marker design DNA sequence alignment reference genome.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_marker_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Design KASP markers based on causal variants. — kasp_marker_design","text":"function provides intertek sequence used marker development selected casual variants. provides information allele location fill Intertek form.needs vcf file variants calls, genome sequence target crop fasta format.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_marker_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Design KASP markers based on causal variants. — kasp_marker_design","text":"","code":"# \\donttest{ # Example to design a KASP marker on a substitution variant path <- tempdir() path1 <- \"https://raw.githubusercontent.com/awkena/panGB/main/Chr02.fa.gz\" path2 <-  system.file(\"extdata\", \"Sobic.002G302700_SNP_snpeff.vcf\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE) ma1 <- kasp_marker_design(vcf_file = path2,                           variant_id_col = 'ID',                           chrom_col = 'CHROM',                           pos_col = 'POS',                           ref_al_col = 'REF',                           alt_al_col = 'ALT',                           genome_file = path1,                           geno_start = 10,                           marker_ID = \"SNP_Chr02_69200443\",                           chr = \"Chr02\",                           plot_draw = TRUE,                           plot_file = path,                           region_name = \"ma1\",                           maf = 0.05) #> using Gonnet  # View marker alignment output from temp folder path3 <- file.path(path, list.files(path = path, \"alignment_\")) # system(paste0('open \"', path3, '\"'))  on.exit(unlink(path)) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert processed KASP data to numeric genotypes — kasp_numeric","title":"Convert processed KASP data to numeric genotypes — kasp_numeric","text":"Convert processed KASP data numeric genotypes","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert processed KASP data to numeric genotypes — kasp_numeric","text":"","code":"kasp_numeric(x, rp_row, dp_row, sep = \":\", data_type = c(\"kasp\", \"agriplex\"))"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert processed KASP data to numeric genotypes — kasp_numeric","text":"x data frame n rows genotypes p rows SNPs; output `proc_kasp()` function. rp_row integer character value indicating row index name recurrent Parent 1. dp_row integer character value indicating row index name donor Parent 2. sep character used separator genotype calls, default colon. data_type character value indicating data source; either `kasp` `agriplex`.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert processed KASP data to numeric genotypes — kasp_numeric","text":"data frame numeric codes KASP genotype calls.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert processed KASP data to numeric genotypes — kasp_numeric","text":"Re-coded 1 homozygous Parent 1 allele; 0 homozygous Parent 2 allele, 0.5 heterozygous. parents SNP call missing, coded -5. Parents 1 2 genotypes snp, coded monomorphic. Loci progeny genotype calls different RP DP coded -2.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert processed KASP data to numeric genotypes — kasp_numeric","text":"","code":"# \\donttest{  # example code library(panGenomeBreedr)  # Reshape KASP data for each master plate for the beta_carotene data dat1 <- panGenomeBreedr::beta_carotene plate_wide <- kasp_reshape_wide(x = dat1,                                 subset = 'MasterPlate',                                 snp_id = 'SNPID',                                 geno_call = 'Call',                                 idvar = \"SubjectID\",                                 blank = 'NTC')  # Get Master Plate 1 plate1 <- plate_wide$`SE-24-1088_P01_d1`  # Convert to numeric format for plotting num_geno <- kasp_numeric(x = plate1[,-1],                         rp_row = 1,                         dp_row = 7,                         data_type = 'kasp')  # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_pch.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate pch characters for cluster plots of KASP genotype calls. — kasp_pch","title":"Generate pch characters for cluster plots of KASP genotype calls. — kasp_pch","text":"Generate pch characters cluster plots KASP genotype calls.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_pch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate pch characters for cluster plots of KASP genotype calls. — kasp_pch","text":"","code":"kasp_pch(   x,   sep = \":\",   blank = \"NTC\",   uncallable = \"Uncallable\",   unused = \"?\",   others = c(\"Missing\", \"Bad\", \"Dupe\", \"Over\", \"Short\") )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_pch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate pch characters for cluster plots of KASP genotype calls. — kasp_pch","text":"x character vector KASP genotype calls one reaction plate. sep character used separator genotype calls, default colon. blank character value indicating `Template Controls (NTC)` genotype calls. uncallable character indicating `Uncallable` genotype calls, present. unused character indicating `?` genotype calls, present. others character vector indicating non-genotype calls KASP genotype calls, present. may include `'Missing', 'Bad', 'Dupe'`, `'', 'Short'`.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_pch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate pch characters for cluster plots of KASP genotype calls. — kasp_pch","text":"`96 x 1` data frame  pch values possible genotypes KASP reaction plate.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_pch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate pch characters for cluster plots of KASP genotype calls. — kasp_pch","text":"","code":"# example code # \\donttest{ x <- panGenomeBreedr::kasp_dat$Call[1:96] geno_pch <- kasp_pch(x = x) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Make KASP marker genotyping QC plot. — kasp_qc_ggplot","title":"Make KASP marker genotyping QC plot. — kasp_qc_ggplot","text":"Make KASP marker genotyping QC plot.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make KASP marker genotyping QC plot. — kasp_qc_ggplot","text":"","code":"kasp_qc_ggplot(   x,   FAM = \"X\",   HEX = \"Y\",   geno_call = \"Call\",   color = \"Color\",   snp_id = \"SNPID\",   blank = \"NTC\",   Group_id = NULL,   scale = FALSE,   pdf = TRUE,   width = 6,   height = 6,   filename = \"kasp_qc\",   expand_axis = 0.5,   legend.pos.x = 0.6,   legend.pos.y = 0.75,   legend.box = \"horizontal\",   legend.pos = \"inside\",   alpha = 0.5,   text_size = 12,   ... )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make KASP marker genotyping QC plot. — kasp_qc_ggplot","text":"x list object KASP genotype calls processed `kasp_color()` function. FAM character indicating column name FAM fluorescence coordinates x. HEX character indicating column name HEX fluorescence coordinates x. geno_call character value indicating column name KASP genotype calls x. color character value indicating column name assigned colors x. snp_id character value indicating column name SNP IDs x. blank character value indicating `Template Controls (NTC)` genotype calls. Group_id character value column ID indicating predictions positive controls x. scale logical value indicating whether scale FAM HEX axis values 0 1. pdf logical value indicating whether save plot pdf graphic device TRUE output plot R FALSE. width numeric value width pdf device. height numeric value height pdf device. filename character value path file name saving pdf. expand_axis numeric value expand axes legend positioning. legend.pos.x numeric value representing x coordinate legend placement. legend.pos.y numeric value representing y coordinate legend placement. legend.box character value either `horizontal` `vertical` legend placement. legend.pos character value position legend; default value `inside`. alpha numeric value 0 1 modifying opacity colors. text_size numeric value setting text size. ... valid arguments can passed ggplot2.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make KASP marker genotyping QC plot. — kasp_qc_ggplot","text":"graphic object plot.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make KASP marker genotyping QC plot. — kasp_qc_ggplot","text":"","code":"# example code library(panGenomeBreedr) # \\donttest{ # Assign KASP colors to plates dat1 <- kasp_color(x = panGenomeBreedr::kasp_dat,                    subset = 'MasterPlate',                    sep = ':',                    geno_call = 'Call',                    uncallable = 'Uncallable',                    unused = '?',                    blank = 'NTC') #> Marker in Plate SE-24-0392_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0392_P01_d1 failed! Check genotype calls. #> Marker in Plate SE-24-0395_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0395_P01_d1 failed! Check genotype calls. #> Marker in Plate SE-24-0397_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0397_P01_d1 failed! Check genotype calls.  # KASP QC plot for Plate 12 kasp_qc_ggplot(x = dat1[12],                     pdf = FALSE,                     Group_id = 'Group',                     scale = TRUE,                     expand_axis = 0.6,                     alpha = 0.5,                     legend.pos.x = 0.6,                     legend.pos.y = 0.8) #> $`SE-24-0396_P01_d1`  #>  # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot2.html","id":null,"dir":"Reference","previous_headings":"","what":"Make KASP marker genotyping QC plot overlaid with predicitons. — kasp_qc_ggplot2","title":"Make KASP marker genotyping QC plot overlaid with predicitons. — kasp_qc_ggplot2","text":"Make KASP marker genotyping QC plot overlaid predicitons.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make KASP marker genotyping QC plot overlaid with predicitons. — kasp_qc_ggplot2","text":"","code":"kasp_qc_ggplot2(   x,   FAM = \"X\",   HEX = \"Y\",   geno_call = \"Call\",   color = \"Color\",   PCH = \"pch\",   snp_id = \"SNPID\",   blank = \"NTC\",   uncallable = \"Uncallable\",   unused = \"?\",   others = c(\"Missing\", \"Bad\", \"Dupe\", \"Over\", \"Short\"),   Group_id = NULL,   Group_unknown = \"?\",   pred_cols = c(Blank = \"black\", False = \"red\", True = \"blue\", Unverified = \"orange2\"),   scale = FALSE,   pdf = TRUE,   width = 6,   height = 6,   filename = \"kasp_qc\",   expand_axis = 0.5,   legend.pos.x = 0.6,   legend.pos.y = 0.75,   legend.box = \"horizontal\",   legend.pos = \"inside\",   alpha = 0.9,   text_size = 12,   ... )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make KASP marker genotyping QC plot overlaid with predicitons. — kasp_qc_ggplot2","text":"x list object KASP genotype calls processed `kasp_color()` function. FAM character indicating column name FAM fluorescence coordinates x. HEX character indicating column name HEX fluorescence coordinates x. geno_call character value indicating column name KASP genotype calls x. color character value indicating column name assigned colors x. PCH character value indicating column name assigned PCH symbols x. snp_id character value indicating column name SNP IDs x. blank character value indicating `Template Controls (NTC)` genotype calls. uncallable character indicating `Uncallable` genotype calls, present. unused character indicating `?` genotype calls, present. others character vector indicating non-genotype calls KASP genotype calls, present. may include `'Missing', 'Bad', 'Dupe'`, `'', 'Short'`. Group_id character value column ID indicating predictions positive controls x. Group_unknown character value representing unknown genotype status samples, present. genotype prediction made samples. pred_cols named character vector length = 4 colors used prediction legend positive controls, present. scale logical value indicating whether scale FAM HEX axis values 0 1. pdf logical value indicating whether save plot pdf graphic device TRUE output plot R FALSE. width numeric value width pdf device. height numeric value height pdf device. filename character value path file name saving pdf. expand_axis numeric value expand axes legend positioning. legend.pos.x numeric value representing x coordinate legend placement. legend.pos.y numeric value representing y coordinate legend placement. legend.box character value either `horizontal` `vertical` legend placement. legend.pos character value position legend; default value `inside`. alpha numeric value 0 1 modifying opacity colors. text_size numeric value setting text size. ... valid arguments can passed ggplot2.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make KASP marker genotyping QC plot overlaid with predicitons. — kasp_qc_ggplot2","text":"graphic object plot.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_qc_ggplot2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make KASP marker genotyping QC plot overlaid with predicitons. — kasp_qc_ggplot2","text":"","code":"# example code library(panGenomeBreedr) # \\donttest{ # Assign KASP colors to plates dat1 <- kasp_color(x = panGenomeBreedr::kasp_dat,                    subset = 'MasterPlate',                    sep = ':',                    geno_call = 'Call',                    uncallable = 'Uncallable',                    unused = '?',                    blank = 'NTC') #> Marker in Plate SE-24-0392_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0392_P01_d1 failed! Check genotype calls. #> Marker in Plate SE-24-0395_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0395_P01_d1 failed! Check genotype calls. #> Marker in Plate SE-24-0397_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0397_P01_d1 failed! Check genotype calls.  # KASP QC plot for Plate 12 kasp_qc_ggplot2(x = dat1[12],                     pdf = FALSE,                     Group_id = 'Group',                     Group_unknown = NULL,                     scale = TRUE,                     expand_axis = 0.6,                     alpha = 0.5,                     legend.pos.x = 0.6,                     legend.pos.y = 0.8) #> $`SE-24-0396_P01_d1`  #>  # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_reshape_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Reshape KASP data to wide format for same samples genotyped with multiple KASP markers. — kasp_reshape_wide","title":"Reshape KASP data to wide format for same samples genotyped with multiple KASP markers. — kasp_reshape_wide","text":"Reshape KASP data wide format samples genotyped multiple KASP markers.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_reshape_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reshape KASP data to wide format for same samples genotyped with multiple KASP markers. — kasp_reshape_wide","text":"","code":"kasp_reshape_wide(   x,   subset = \"MasterPlate\",   snp_id = \"SNPID\",   geno_call = \"Call\",   idvar = \"SubjectID\",   blank = \"NTC\" )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_reshape_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reshape KASP data to wide format for same samples genotyped with multiple KASP markers. — kasp_reshape_wide","text":"x data frame KASP genotype calls one multiple plates. subset character value indicating column name master plate samples x. snp_id character value indicating column name SNP IDs x. geno_call character value indicating column name KASP genotype calls x. idvar character value indicating column name unique subject IDs samples x. blank character value indicating `Template Controls (NTC)` genotype calls.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_reshape_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reshape KASP data to wide format for same samples genotyped with multiple KASP markers. — kasp_reshape_wide","text":"list object reshaped data master plates subject IDs components. components data frames Column 1 subject IDs rest columns number KASP markers assayed master plate.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/kasp_reshape_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reshape KASP data to wide format for same samples genotyped with multiple KASP markers. — kasp_reshape_wide","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) dat1 <- panGenomeBreedr::beta_carotene plate_wide <- kasp_reshape_wide(x = dat1,                                 subset = 'MasterPlate',                                 snp_id = 'SNPID',                                 geno_call = 'Call',                                 idvar = \"SubjectID\",                                 blank = 'NTC') # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_sqlite_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"List all tables in the SQLite database. — list_sqlite_tables","title":"List all tables in the SQLite database. — list_sqlite_tables","text":"List tables SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_sqlite_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all tables in the SQLite database. — list_sqlite_tables","text":"","code":"list_sqlite_tables(db_path)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_sqlite_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all tables in the SQLite database. — list_sqlite_tables","text":"db_path character value indicating path SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_sqlite_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all tables in the SQLite database. — list_sqlite_tables","text":"character vector names SQLite databases","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_sqlite_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all tables in the SQLite database. — list_sqlite_tables","text":"","code":"# \\donttest{ library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # List tables in the SQLite database list_sqlite_tables(mini_db_path) #> [1] \"annotations\" \"genotypes\"   \"variants\"     # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_table_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the column names and types for any table in a SQLite database. — list_table_columns","title":"Check the column names and types for any table in a SQLite database. — list_table_columns","text":"Check column names types table SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_table_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the column names and types for any table in a SQLite database. — list_table_columns","text":"","code":"list_table_columns(   db_path,   table_name = c(\"variants\", \"annotations\", \"genotypes\") )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_table_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the column names and types for any table in a SQLite database. — list_table_columns","text":"db_path character value indicating path SQLite database. table_name character value specifying name table SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_table_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the column names and types for any table in a SQLite database. — list_table_columns","text":"data frame table column information SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/list_table_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check the column names and types for any table in a SQLite database. — list_table_columns","text":"","code":"# \\donttest{ library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # List column names and type of variable in the variants table in the database list_table_columns(mini_db_path, table_name = \"variants\") #>   cid         name    type notnull dflt_value pk #> 1   0   variant_id    TEXT       0         NA  0 #> 2   1        chrom    TEXT       0         NA  0 #> 3   2          pos INTEGER       0         NA  0 #> 4   3          ref    TEXT       0         NA  0 #> 5   4          alt    TEXT       0         NA  0 #> 6   5         qual    TEXT       0         NA  0 #> 7   6       filter    TEXT       0         NA  0 #> 8   7 variant_type    TEXT       0         NA  0  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/nsamples_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a summary of the number of samples per 96-well plate in a multi-plate KASP assay. — nsamples_plate","title":"Get a summary of the number of samples per 96-well plate in a multi-plate KASP assay. — nsamples_plate","text":"Get summary number samples per 96-well plate multi-plate KASP assay.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/nsamples_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a summary of the number of samples per 96-well plate in a multi-plate KASP assay. — nsamples_plate","text":"","code":"nsamples_plate(   x,   subset = \"plates\",   snp_id = \"SNPID\",   plate_id = \"MasterPlate\" )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/nsamples_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a summary of the number of samples per 96-well plate in a multi-plate KASP assay. — nsamples_plate","text":"x data frame KASP genotype calls one multiple plates. subset character value indicating column name taking subsets x processing; default `plates`. snp_id character value indicating column name SNP IDs x. plate_id character value indicating column name master plate samples x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/nsamples_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a summary of the number of samples per 96-well plate in a multi-plate KASP assay. — nsamples_plate","text":"list object plates summary number samples per plate components.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/nsamples_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a summary of the number of samples per 96-well plate in a multi-plate KASP assay. — nsamples_plate","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) dat1 <- panGenomeBreedr::beta_carotene dat1 <- nsamples_plate(x = dat1,                      subset = 'plates',                      snp_id = 'SNPID',                      plate_id = 'MasterPlate'                     )$summ # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/order_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Order marker IDs based on their chromosome numbers and positions in ascending order. — order_markers","title":"Order marker IDs based on their chromosome numbers and positions in ascending order. — order_markers","text":"Order marker IDs based chromosome numbers positions ascending order.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/order_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order marker IDs based on their chromosome numbers and positions in ascending order. — order_markers","text":"","code":"order_markers(x, chr_col = \"chr\", pos_col = \"pos\")"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/order_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order marker IDs based on their chromosome numbers and positions in ascending order. — order_markers","text":"x data frame object map file marker data file. chr_col character value indicating column name chromosome IDs x. pos_col character value indicating column name chromosome positions x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/order_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order marker IDs based on their chromosome numbers and positions in ascending order. — order_markers","text":"data frame object dimension x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/order_markers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order marker IDs based on their chromosome numbers and positions in ascending order. — order_markers","text":"","code":"# example code map_file <- data.frame(snpid = paste0('S', rep(1:2, 5), '_', 1001:1005),                        chr = rep(1:2, 5),                        pos = rep(1001:1005, 2))  # Order map file map_file <- order_markers(x = map_file,                           chr_col = 'chr',                           pos_col = 'pos')"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_het.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and subset loci with any heterozygous parent genotype. — parent_het","title":"Identify and subset loci with any heterozygous parent genotype. — parent_het","text":"Identify subset loci heterozygous parent genotype.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_het.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and subset loci with any heterozygous parent genotype. — parent_het","text":"","code":"parent_het(x, rp_row, dp_row, sep = \":\", na_code = NA)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_het.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and subset loci with any heterozygous parent genotype. — parent_het","text":"x data matrix frame markers columns samples rows. rp_row, dp_row integer character value indicating row index name Parent 1 2. sep character used separator genotype calls, default colon. na_code value indicating missing data x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_het.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and subset loci with any heterozygous parent genotype. — parent_het","text":"list object following components: 1) data frame loci least one hetrozygous parent genotype, present. 2) data frame loci homozygous parent genotype.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_het.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify and subset loci with any heterozygous parent genotype. — parent_het","text":"","code":"# example code library(panGenomeBreedr)  # Marker data dat <- data.frame(snp1 = c('C:A', 'A:A', 'C:A', 'C:A'),                   snp2 = c('C:C', 'G:G', 'C:C', 'C:C'),                   snp3 = c('C:T', 'C:C', 'C:T', 'C:T'),                   snp4 = c('G:G', '-:-', 'G:-', 'G:G'),                   snp5 = c('T:T', 'A:A', 'T:A', 'T:A'),                   row.names = c('rp', 'dp', 'ind_1', 'ind_2'))  # Find loci with at least one heterozygous parent genotype par_het <- parent_het(x = dat,                       rp_row = 1,                       dp_row = 2,                       sep = ':')$par_het"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and subset loci with any parent missing genotype. — parent_missing","title":"Identify and subset loci with any parent missing genotype. — parent_missing","text":"Identify subset loci parent missing genotype.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and subset loci with any parent missing genotype. — parent_missing","text":"","code":"parent_missing(x, rp_row, dp_row, na_code = NA)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and subset loci with any parent missing genotype. — parent_missing","text":"x data matrix frame markers columns samples rows. rp_row, dp_row integer character value indicating row index name Parent 1 2. na_code value indicating missing data x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify and subset loci with any parent missing genotype. — parent_missing","text":"list object following components: 1) data frame loci least one parent genotype missing, present. 2) data frame loci parent genotype present.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify and subset loci with any parent missing genotype. — parent_missing","text":"","code":"# example code library(panGenomeBreedr)  # Marker data dat <- data.frame(snp1 = c('C:C', 'A:A', 'C:A', 'C:A'),                   snp2 = c('C:C', NA, 'C:C', 'C:C'),                   snp3 = c(NA, 'C:C', 'C:T', 'C:T'),                   snp4 = c('G:G', '-:-', 'G:-', 'G:G'),                   snp5 = c('T:T', 'A:A', 'T:A', 'T:A'),                   row.names = c('rp', 'dp', 'ind_1', 'ind_2'))  # Find loci with at least one missing parent genotype par_miss <- parent_missing(x = dat,                           rp_row = 1,                           dp_row = 2)$par_missing"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Select polymorphic loci between two parents in a marker panel. — parent_poly","title":"Select polymorphic loci between two parents in a marker panel. — parent_poly","text":"Select polymorphic loci two parents marker panel.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select polymorphic loci between two parents in a marker panel. — parent_poly","text":"","code":"parent_poly(x, rp_row, dp_row, sep = \":\", na_code = NA)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select polymorphic loci between two parents in a marker panel. — parent_poly","text":"x data matrix frame markers columns samples rows. rp_row, dp_row integer character value indicating row index name Parent 1 2. sep character used separator genotype calls, default colon. na_code value indicating missing data x.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_poly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select polymorphic loci between two parents in a marker panel. — parent_poly","text":"data matrix frame object polymorphic loci two parental lines.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parent_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select polymorphic loci between two parents in a marker panel. — parent_poly","text":"","code":"# example code  # Marker data dat <- data.frame(snp1 = c('C:C', 'A:A', 'C:A', 'C:A'),                   snp2 = c('C:C', 'C:C', 'C:C', 'C:C'),                   snp3 = c('T:T', 'C:C', 'C:T', 'C:T'),                   snp4 = c('G:G', '-:-', 'G:-', 'G:G'),                   snp5 = c('T:T', 'T:T', 'T:A', 'T:A'),                   row.names = c('rp', 'dp', 'art_het1', 'art_het2'))  # Find polymorphic loci poly_loci <- parent_poly(x = dat,                          rp_row = 1,                          dp_row = 2,                          sep = ':')"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parse_marker_ns.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse marker names of Hapmap format with a common pattern containing chromosome numbers and positions into a map file. — parse_marker_ns","title":"Parse marker names of Hapmap format with a common pattern containing chromosome numbers and positions into a map file. — parse_marker_ns","text":"Parse marker names Hapmap format common pattern containing chromosome numbers positions map file.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parse_marker_ns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse marker names of Hapmap format with a common pattern containing chromosome numbers and positions into a map file. — parse_marker_ns","text":"","code":"parse_marker_ns(x, sep = \"_\", prefix = \"S\")"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parse_marker_ns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse marker names of Hapmap format with a common pattern containing chromosome numbers and positions into a map file. — parse_marker_ns","text":"x character vector containing original marker names parsed. sep character value serves unique separator chromosome positions components marker name; default value underscore. prefix character value represents common pattern marker names precedes chromosome number; default value `S`.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parse_marker_ns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse marker names of Hapmap format with a common pattern containing chromosome numbers and positions into a map file. — parse_marker_ns","text":"data frame map file consisting original marker names, chromosome numbers positions.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parse_marker_ns.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse marker names of Hapmap format with a common pattern containing chromosome numbers and positions into a map file. — parse_marker_ns","text":"marker names parsed map file must contain chromosome numbers positions common separator, well common pattern preceding marker names. instance, `S1_101` `S2_102` `S` common pattern preceding marker names, `1` `2` chromosome numbers, `101` `102` positions, `_` separator.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/parse_marker_ns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse marker names of Hapmap format with a common pattern containing chromosome numbers and positions into a map file. — parse_marker_ns","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  snps <- paste0('S', 1:10, '_', 101:110) map_file <- parse_marker_ns(x = snps, sep = '_', prefix = 'S') # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/plot_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot kasp genotyping plate layout. — plot_plate","title":"Plot kasp genotyping plate layout. — plot_plate","text":"Plot kasp genotyping plate layout.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/plot_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot kasp genotyping plate layout. — plot_plate","text":"","code":"plot_plate(   x,   well = \"MasterWell\",   color = \"Color\",   geno_call = \"Call\",   snp_id = \"SNPID\",   pdf = TRUE,   width = 8,   height = 5,   filename = \"plate_layout\",   text_size = 12,   ... )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/plot_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot kasp genotyping plate layout. — plot_plate","text":"x list object KASP genotype calls processed `kasp_color()` function. well character value representing column name genotyping plate wells. color character value indicating column name assigned colors x. geno_call character indicating column name used genotype snp_id character value indicating column name SNP IDs x. pdf logical value indicating whether save plot pdf graphic width numeric value width pdf device. height numeric value height pdf device. filename character value path file name saving pdf. text_size numeric value text size plot output. ... valid arguments can passed ggplot2.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/plot_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot kasp genotyping plate layout. — plot_plate","text":"ggplot graphical output plate layout.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/plot_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot kasp genotyping plate layout. — plot_plate","text":"","code":"# example code library(panGenomeBreedr) # \\donttest{ # Assign KASP colors to plates dat1 <- kasp_color(x = panGenomeBreedr::kasp_dat,                    subset = 'MasterPlate',                    sep = ':',                    geno_call = 'Call',                    uncallable = 'Uncallable',                    unused = '?',                    blank = 'NTC') #> Marker in Plate SE-24-0392_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0392_P01_d1 failed! Check genotype calls. #> Marker in Plate SE-24-0395_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0395_P01_d1 failed! Check genotype calls. #> Marker in Plate SE-24-0397_P01_d2 failed! Check genotype calls. #> Marker in Plate SE-24-0397_P01_d1 failed! Check genotype calls. # Plot Plate 12 to see sample arrangement plot_plate(dat1[12], pdf = FALSE) #> $`SE-24-0396_P01_d1`  #>  # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_status.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the prediction status of positive controls in a KASP assay, if present. — pred_status","title":"Generate the prediction status of positive controls in a KASP assay, if present. — pred_status","text":"Generate prediction status positive controls KASP assay, present.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_status.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the prediction status of positive controls in a KASP assay, if present. — pred_status","text":"","code":"pred_status(   plate,   geno_call = \"Call\",   Group_id = \"Group\",   blank = \"NTC\",   Group_unknown = NULL )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_status.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the prediction status of positive controls in a KASP assay, if present. — pred_status","text":"plate data frame KASP genotype calls one plate. geno_call character indicating column name used genotype calls plate. Group_id character value column ID indicating predictions positive controls plate. blank character value indicating `Template Controls (NTC)` genotype calls. Group_unknown character value representing unknown genotype status samples, present. genotype prediction can made samples.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_status.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the prediction status of positive controls in a KASP assay, if present. — pred_status","text":"data frame prediction status sample added column.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_status.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate the prediction status of positive controls in a KASP assay, if present. — pred_status","text":"function recodes prediction status sample follows: TRUE = prediction matches observed genotype call FALSE = prediction match observed genotype call Unverified = Either observed genotype call made expected genotype made prior KASP genotyping . Blank = NTC wells","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_status.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the prediction status of positive controls in a KASP assay, if present. — pred_status","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) # Get Plate 1  dat1 <- panGenomeBreedr::beta_carotene[1:96,] dat1 <- pred_status(plate = dat1, geno_call = 'Call', Group_id = 'Group', blank = 'NTC', Group_unknown = '?') # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate summary of prediction for positive controls in KASP genotype data, if present — pred_summary","title":"Generate summary of prediction for positive controls in KASP genotype data, if present — pred_summary","text":"Generate summary prediction positive controls KASP genotype data, present","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate summary of prediction for positive controls in KASP genotype data, if present — pred_summary","text":"","code":"pred_summary(   x,   snp_id = \"SNPID\",   Group_id = NULL,   blank = \"NTC\",   Group_unknown = \"?\",   geno_call = \"Call\",   rate_out = FALSE )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate summary of prediction for positive controls in KASP genotype data, if present — pred_summary","text":"x list object KASP genotype calls processed `kasp_color()` function. snp_id character value indicating column name SNP IDs x. Group_id character value column ID indicating predictions positive controls x. blank character value indicating `Template Controls (NTC)` genotype calls. Group_unknown character value representing unverified expected genotype status samples, present. genotype prediction can made samples. geno_call character value indicating column name KASP genotype calls x. rate_out logical value indicating whether return raw counts proportions generated prediction summary.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate summary of prediction for positive controls in KASP genotype data, if present — pred_summary","text":"list object plates prediction summary components.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate summary of prediction for positive controls in KASP genotype data, if present — pred_summary","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) dat1 <- panGenomeBreedr::beta_carotene dat1 <- kasp_color(x = beta_carotene,                    subset = 'plates',                    sep = ':',                    geno_call = 'Call',                    uncallable = 'Uncallable',                    unused = '?',                    blank = 'NTC')  dat1 <- pred_summary(x = dat1,                     snp_id = 'SNPID',                     geno_call = 'Call',                     Group_id = 'Group',                     blank = 'NTC',                     Group_unknown = '?') dat1$summ #>                          plate     snp_id false true unverified #> 1 SE-24-1088_P01_d1_snpSB00800 snpSB00800     4    6         84 #> 2 SE-24-1088_P01_d2_snpSB00800 snpSB00800     2    6         86 #> 3 SE-24-1088_P01_d1_snpSB00803 snpSB00803     0   32         62 #> 4 SE-24-1088_P01_d2_snpSB00803 snpSB00803     0   32         62 #> 5 SE-24-1088_P01_d1_snpSB00804 snpSB00804     1   31         62 #> 6 SE-24-1088_P01_d2_snpSB00804 snpSB00804     1   31         62 #> 7 SE-24-1088_P01_d1_snpSB00805 snpSB00805    14   18         62 #> 8 SE-24-1088_P01_d2_snpSB00805 snpSB00805    14   18         62 # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create decision support bar plots of match vs. mismatch rates of KASP markers that had predictions for positive controls. — pred_summary_plot","title":"Create decision support bar plots of match vs. mismatch rates of KASP markers that had predictions for positive controls. — pred_summary_plot","text":"Create decision support bar plots match vs. mismatch rates KASP markers  predictions positive controls.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create decision support bar plots of match vs. mismatch rates of KASP markers that had predictions for positive controls. — pred_summary_plot","text":"","code":"pred_summary_plot(   x,   pdf = FALSE,   pred_cols = c(false = \"red\", true = \"blue\", unverified = \"orange2\"),   filename = \"pred_summary_barplot\",   alpha = 1,   text_size = 12,   width = 6,   height = 6,   angle = 45,   ... )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create decision support bar plots of match vs. mismatch rates of KASP markers that had predictions for positive controls. — pred_summary_plot","text":"x data frame object prediction summaries KASP markers returned `pred_summary()` function. pdf logical value indicating whether save plot pdf graphic device TRUE output plot R FALSE. pred_cols named character vector length = 3 colors used prediction status legend positive controls. filename character value path file name saving pdf. alpha numeric value 0 1 modifying opacity colors. text_size numeric value setting text size. width numeric value width pdf device. height numeric value height pdf device. angle numeric value setting angle placement text axis. ... valid arguments can passed ggplot2.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create decision support bar plots of match vs. mismatch rates of KASP markers that had predictions for positive controls. — pred_summary_plot","text":"graphic object ggplot.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/pred_summary_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create decision support bar plots of match vs. mismatch rates of KASP markers that had predictions for positive controls. — pred_summary_plot","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) dat1 <- panGenomeBreedr::beta_carotene my_sum <- kasp_color(x = dat1,                         subset = 'plates',                         sep = ':',                         geno_call = 'Call',                         uncallable = 'Uncallable',                         unused = '?',                         blank = 'NTC') |>  pred_summary(snp_id = 'SNPID',                Group_id = 'Group',                Group_unknown = '?',                geno_call = 'Call',                rate_out = TRUE)  pred_summary_plot(x = my_sum$summ,                   pdf = FALSE,                   pred_cols = c('false' = 'red', 'true' = 'blue',                                 'unverified' = 'orange2'),                   alpha = 1,                   text_size = 12,                   width = 6,                   height = 6,                   angle = 45) #> $snpSB00800  #>  #> $snpSB00803  #>  #> $snpSB00804  #>  #> $snpSB00805  #>  # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/proc_kasp.html","id":null,"dir":"Reference","previous_headings":"","what":"Process reshaped KASP genotype data for heatmap plotting — proc_kasp","title":"Process reshaped KASP genotype data for heatmap plotting — proc_kasp","text":"Process reshaped KASP genotype data heatmap plotting","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/proc_kasp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process reshaped KASP genotype data for heatmap plotting — proc_kasp","text":"","code":"proc_kasp(   x,   sample_id = \"SubjectID\",   marker_start = 2,   kasp_map,   map_snp_id,   chr = \"chr\",   chr_pos = \"pos\" )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/proc_kasp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process reshaped KASP genotype data for heatmap plotting — proc_kasp","text":"x data frame genotype calls. sample_id string representing column name unique sample IDs. marker_start integer indicating column index start SNP calls. kasp_map data frame consisting marker chromosome number positions. map_snp_id character value indicating column name SNP IDs kasp_map. chr character value column name chromosome number kasp_map. chr_pos character value column name chromosome positions kasp_map.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/proc_kasp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process reshaped KASP genotype data for heatmap plotting — proc_kasp","text":"data frame object re-ordered SNPs based chromosome numbers positions.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/proc_kasp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process reshaped KASP genotype data for heatmap plotting — proc_kasp","text":"function experimental used reshaped KASP data. data processing involves following steps: 1. Transposing data 2. Matching marker names KASP map file names KASP genotype file 3. Column bind matched map markers transposed data 4. Sort data ascending order chromosome numbers 5. Split data chromosomes 6. Sort data ascending order physical positions per chromosome 7. Row bind sorted data together 8. Re-transpose data make markers columns samples rows plotting.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/proc_kasp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process reshaped KASP genotype data for heatmap plotting — proc_kasp","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr) dat1 <- panGenomeBreedr::beta_carotene # Reshape KASP data for each master plate for the beta_carotene data plate_wide <- kasp_reshape_wide(x = dat1,                                 subset = 'MasterPlate',                                 snp_id = 'SNPID',                                 geno_call = 'Call',                                 idvar = \"SubjectID\",                                 blank = 'NTC')  # Get Master Plate 1 plate1 <- plate_wide$`SE-24-1088_P01_d1`  # Generate a map for the beta_carotene KASP data kasp_map <- data.frame(SNPID = unique(beta_carotene$SNPID),                        SNPID_2 = paste0('snpSB', 1:4, '|', c(800, 803, 804, 805)),                        chr = c(1:4),                        pos = c(800, 803, 804, 805))  # Process Plate1 to re-order SNPs based on chrom. and position proc_plate1 <- proc_kasp(x = plate1,                          kasp_map = kasp_map,                          map_snp_id = \"SNPID\",                          sample_id = \"SubjectID\",                          marker_start = 2,                          chr = 'chr',                          chr_pos = 'pos') # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_ann_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Query the annotations table within a specified genomic region and summarize the distribution of SnpEff annotations and impact categories by variant type. — query_ann_summary","title":"Query the annotations table within a specified genomic region and summarize the distribution of SnpEff annotations and impact categories by variant type. — query_ann_summary","text":"Query annotations table within specified genomic region summarize distribution SnpEff annotations impact categories variant type.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_ann_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query the annotations table within a specified genomic region and summarize the distribution of SnpEff annotations and impact categories by variant type. — query_ann_summary","text":"","code":"query_ann_summary(   db_path,   chrom,   start,   end,   annotations_table = \"annotations\",   variants_table = \"variants\" )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_ann_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query the annotations table within a specified genomic region and summarize the distribution of SnpEff annotations and impact categories by variant type. — query_ann_summary","text":"db_path character value indicating path SQLite database. chrom character value specifying chromosome name. start, end numeric value specifying start end coordinates candidate gene. annotations_table, variants_table character value indicating table names snpEff annotations variants SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_ann_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query the annotations table within a specified genomic region and summarize the distribution of SnpEff annotations and impact categories by variant type. — query_ann_summary","text":"list : annotation_summary impact_summary variant_type_totals","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_ann_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query the annotations table within a specified genomic region and summarize the distribution of SnpEff annotations and impact categories by variant type. — query_ann_summary","text":"","code":"# \\donttest{ library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Annotation and impact summary distribution within Chr05: 75104537-75106403 ann_summary <- query_ann_summary(db_path = mini_db_path,                                  chrom = \"Chr05\",                                  start = 75104537,                                  end = 75106403)  # Clean tempdir contents <- list.files(tempdir(),                        full.names = TRUE,                        recursive = TRUE,                        all.files = TRUE,                        include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_af.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variants based on minimum and maximum allele frequencies within a defined region in a SQLite database. — query_by_af","title":"Extract variants based on minimum and maximum allele frequencies within a defined region in a SQLite database. — query_by_af","text":"Extract variants based minimum maximum allele frequencies within defined region SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_af.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variants based on minimum and maximum allele frequencies within a defined region in a SQLite database. — query_by_af","text":"","code":"query_by_af(   db_path,   min_af = 0,   max_af = 1,   chrom = NULL,   start = NULL,   end = NULL )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_af.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variants based on minimum and maximum allele frequencies within a defined region in a SQLite database. — query_by_af","text":"db_path character value indicating path SQLite database. min_af, max_af numeric value indicating minimum maximum allele frequency thresholds filtering variants. chrom character value specifying chromosome name. start, end numeric value specifying start end coordinates candidate gene.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_af.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variants based on minimum and maximum allele frequencies within a defined region in a SQLite database. — query_by_af","text":"data frame filtered variants allele frequencies.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_af.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variants based on minimum and maximum allele frequencies within a defined region in a SQLite database. — query_by_af","text":"","code":"# \\donttest{ library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Query database to filter variants in a region based on alt allele frequency filter_af <- query_by_af(db_path = mini_db_path,                          min_af = 0.01,                          max_af = 0.99,                          chrom = \"Chr05\",                          start = 75104537,                          end = 75106403)  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_impact.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variants from annotation table based on impact type: LOW, MODERATE, HIGH, MODIFIER. — query_by_impact","title":"Extract variants from annotation table based on impact type: LOW, MODERATE, HIGH, MODIFIER. — query_by_impact","text":"Extract variants annotation table based impact type: LOW, MODERATE, HIGH, MODIFIER.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_impact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variants from annotation table based on impact type: LOW, MODERATE, HIGH, MODIFIER. — query_by_impact","text":"","code":"query_by_impact(   db_path,   impact_level = c(\"HIGH\", \"MODERATE\", \"LOW\", \"MODIFIER\"),   chrom = NULL,   start = NULL,   end = NULL )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_impact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variants from annotation table based on impact type: LOW, MODERATE, HIGH, MODIFIER. — query_by_impact","text":"db_path character value indicating path SQLite database. impact_level character value specifying vriant impact type following snpEff annotation conventions: `HIGH`, `MODERATE`, `LOW`, `MODIFIER` chrom character value specifying chromosome name. start, end numeric value specifying start end coordinates candidate gene.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_impact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variants from annotation table based on impact type: LOW, MODERATE, HIGH, MODIFIER. — query_by_impact","text":"data frame variants showing impact type defined SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_by_impact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variants from annotation table based on impact type: LOW, MODERATE, HIGH, MODIFIER. — query_by_impact","text":"","code":"# \\donttest{ library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Extract low impact variant for a region or gene high_variants <- query_by_impact(db_path = mini_db_path,                                impact_level = 'high',                                chrom = \"Chr05\",                                start = 75104537,                                end = 75106403)  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_db.html","id":null,"dir":"Reference","previous_headings":"","what":"Query any table in your SQLite database using chromosome and a genomic position range. — query_db","title":"Query any table in your SQLite database using chromosome and a genomic position range. — query_db","text":"Query table SQLite database using chromosome genomic position range.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_db.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query any table in your SQLite database using chromosome and a genomic position range. — query_db","text":"","code":"query_db(   db_path,   table_name = c(\"variants\", \"annotations\", \"genotypes\"),   chrom,   start = NULL,   end = NULL,   gene_name = NULL )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_db.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query any table in your SQLite database using chromosome and a genomic position range. — query_db","text":"db_path character value indicating path SQLite database. table_name character value specifying name table SQLite database. chrom character value specifying chromosome name. start, end numeric value specifying start end coordinates candidate gene. gene_name character value indicating Sobic ID candidate gene, available. used querying `annotations` table database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_db.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query any table in your SQLite database using chromosome and a genomic position range. — query_db","text":"data frame table queried SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_db.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query any table in your SQLite database using chromosome and a genomic position range. — query_db","text":"","code":"# \\donttest{ library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Extract snpEff annotation for variants within the candidate gene Sobic.005G213600 annota_region <- query_db(db_path = mini_db_path,                            chrom = \"Chr05\",                            start = 75104537,                            end = 75106403,                            table_name = \"annotations\",                            gene_name = \"Sobic.005G213600\")  # Extract VCF genotypes for variants within the region: 'Chr05:75104537-75106403' gt_region <- query_db(db_path = mini_db_path,                       chrom = \"Chr05\",                       start = 75104537,                       end = 75106403,                       table_name = \"genotypes\")  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE)  # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_genotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Query genotypes for one or more variant IDs from a wide-format genotype table. — query_genotypes","title":"Query genotypes for one or more variant IDs from a wide-format genotype table. — query_genotypes","text":"Query genotypes one variant IDs wide-format genotype table.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_genotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query genotypes for one or more variant IDs from a wide-format genotype table. — query_genotypes","text":"","code":"query_genotypes(   db_path,   variant_ids,   variant_id_col = \"variant_id\",   variants_table = \"variants\",   genotypes_table = \"genotypes\",   meta_data = NULL )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_genotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query genotypes for one or more variant IDs from a wide-format genotype table. — query_genotypes","text":"db_path path SQLite PostgreSQL database. variant_ids character vector variant IDs query. variant_id_col character value specifying column name variant IDs SQLite database. variants_table, genotypes_table, character value specifying column names variants genotypes tables, respectively, SQLite database. `meta_data = NULL`, returns metadata variants table. meta_data character vector metadata include genotype data.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_genotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query genotypes for one or more variant IDs from a wide-format genotype table. — query_genotypes","text":"data.frame genotype data variants x samples format metadata.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/query_genotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query genotypes for one or more variant IDs from a wide-format genotype table. — query_genotypes","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Extract all genotypes for all samples for any set of variants geno_filter <- query_genotypes(db_path = mini_db_path,                                variant_ids = c(\"INDEL_Chr05_75104541\",                                                \"SNP_Chr05_75104557\"),                                meta_data = c('chrom', 'pos', 'ref', 'alt',                                              'variant_type')) # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/read_kasp_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read raw KASP results file (csv format) with one or multiple plates. — read_kasp_csv","title":"Read raw KASP results file (csv format) with one or multiple plates. — read_kasp_csv","text":"Read raw KASP results file (csv format) one multiple plates.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/read_kasp_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read raw KASP results file (csv format) with one or multiple plates. — read_kasp_csv","text":"","code":"read_kasp_csv(   file,   row_tags = c(\"Statistics\", \"DNA\", \"SNPs\", \"Scaling\", \"Data\"),   spacing = 2L,   data_type = c(\"raw\", \"polished\") )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/read_kasp_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read raw KASP results file (csv format) with one or multiple plates. — read_kasp_csv","text":"file character value indicating file name path KASP results file (csv format). row_tags character vector ordered row tags components data file. spacing integer value specifying number empty rows data components file. data_type character value indicating file type import; currently supports either `raw` `polished` KASP results file.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/read_kasp_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read raw KASP results file (csv format) with one or multiple plates. — read_kasp_csv","text":"list object KASP results file genotyping calls FAM HEX coordinates.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/read_kasp_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read raw KASP results file (csv format) with one or multiple plates. — read_kasp_csv","text":"","code":"# example code library(panGenomeBreedr) # Read raw bulked KASP data into R # \\donttest{ path1 <-  system.file(\"extdata\", \"Genotyping_141.010_01.csv\",                       package = \"panGenomeBreedr\",                       mustWork = TRUE)  file1 <- read_kasp_csv(file = path1, data_type = 'raw') # Get KASP genotyping data for plotting kasp_dat <- file1$Data # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rm_mono.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove or filter out monomorphic loci from a data matrix or frame. — rm_mono","title":"Remove or filter out monomorphic loci from a data matrix or frame. — rm_mono","text":"Remove filter monomorphic loci data matrix frame.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rm_mono.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove or filter out monomorphic loci from a data matrix or frame. — rm_mono","text":"","code":"rm_mono(mydata)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rm_mono.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove or filter out monomorphic loci from a data matrix or frame. — rm_mono","text":"mydata data frame matrix consiting markers columns samples rows.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rm_mono.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove or filter out monomorphic loci from a data matrix or frame. — rm_mono","text":"data frame matrix object.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rm_mono.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove or filter out monomorphic loci from a data matrix or frame. — rm_mono","text":"","code":"# example code library(panGenomeBreedr) # Remove momomorphic loci # \\donttest{ # Create a dummy marker frame data with monomorphic markers mydf <- data.frame(S1_1001 = rep('A:A', 12),                    S1_1011 = rep(c('T:T', 'T:C', 'C:C'), each = 4),                    S2_1001 = rep(c('G:G', 'G:C', 'C:C'), each = 4),                    S3_1101 = rep(c('G:G', 'C:C'), each = 6),                    S1_1100 = rep(c('A:G', 'G:G', 'A:A'), each = 4),                    S1_1201 = rep('C:A', 12),                    row.names = sprintf('Ind_%02s', 1:12))  # Remove monomorphic markers mydf_filtered <- rm_mono(mydata = mydf) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rpp_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize computed RPP values for BC progenies as a bar plot. — rpp_barplot","title":"Visualize computed RPP values for BC progenies as a bar plot. — rpp_barplot","text":"Visualize computed RPP values BC progenies bar plot.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rpp_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize computed RPP values for BC progenies as a bar plot. — rpp_barplot","text":"","code":"rpp_barplot(   rpp_df,   rpp_col = \"total_rpp\",   rpp_sample_id = \"sample_id\",   bc_gen = NULL,   rpp_threshold = NULL,   thresh_line_col = \"coral2\",   show_above_thresh = FALSE,   text_size = 15,   text_scale_fct = 0.2,   alpha = 0.5,   bar_width = 0.5,   bar_col = \"cornflowerblue\",   aspect_ratio = 0.5,   pdf = FALSE,   filename = \"rpp_barplot\",   width = 8,   height = 6 )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rpp_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize computed RPP values for BC progenies as a bar plot. — rpp_barplot","text":"rpp_df data frame containing computed RPP values BC progeny. rpp_col character value indicating column name RPP values rpp_df. rpp_sample_id character value indicating column name progeny IDs rpp_df. bc_gen integer value indicating BC generation progenies rpp_df. value used compute nominal RPP values, rpp_threshold `= NULL`. rpp_threshold numeric value  0 1 indicating RPP threshold selecting BC progenies. thresh_line_col character value indicating color threshold line. show_above_thresh logical value indicating whether subset rpp_df show lines RPP values greater equal desired RPP threshold. subset lines shown plot. text_size numeric value setting text size. text_scale_fct numeric value scaling text size. default value `20%` text_size. alpha numeric value 0 1 modifying opacity colors. bar_width numeric value setting width plot bars. bar_col character value setting color fill plot bars. aspect_ratio numeric value setting aspect ratio bar plot. pdf logical value indicating whether save plot pdf graphic device TRUE output plot R FALSE. filename character value path file name saving pdf. width numeric value width pdf device. height numeric value height pdf device.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rpp_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize computed RPP values for BC progenies as a bar plot. — rpp_barplot","text":"graphical ggplot object.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/rpp_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize computed RPP values for BC progenies as a bar plot. — rpp_barplot","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Observed RPP values rpp_df <- data.frame(sample_id = c('rp', 'dp', paste0('bc3_', 1:8)),                      rpp = c(1, 0, round(seq(0.75, 0.97, len = 8), 2)))  # Generate bar plot for RPP values rpp_barplot(rpp_df,             rpp_col = 'rpp',             rpp_threshold = 0.85,             text_size = 18,             text_scale_fct = 0.1,             alpha = 0.9,             bar_width = 0.5,             aspect_ratio = 0.5,             pdf = FALSE)  # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/scale_axis.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize FAM and HEX fluorescence values between 0 and 1 — scale_axis","title":"Normalize FAM and HEX fluorescence values between 0 and 1 — scale_axis","text":"Normalize FAM HEX fluorescence values 0 1","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/scale_axis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize FAM and HEX fluorescence values between 0 and 1 — scale_axis","text":"","code":"scale_axis(x)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/scale_axis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize FAM and HEX fluorescence values between 0 and 1 — scale_axis","text":"x numeric vector FAM HEX fluorescence values","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/scale_axis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize FAM and HEX fluorescence values between 0 and 1 — scale_axis","text":"numeric vector normalized values 0 1","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/scale_axis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize FAM and HEX fluorescence values between 0 and 1 — scale_axis","text":"","code":"# example code library(panGenomeBreedr) # Get Plate 1 dat1 <- panGenomeBreedr::kasp_dat[1:96,] FAM_scaled <- scale_axis(dat1$X)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/sim_snp_dat.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate raw SNP loci for any chromosome with or without LD. — sim_snp_dat","title":"Simulate raw SNP loci for any chromosome with or without LD. — sim_snp_dat","text":"Simulate raw SNP loci chromosome without LD.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/sim_snp_dat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate raw SNP loci for any chromosome with or without LD. — sim_snp_dat","text":"","code":"sim_snp_dat(   nsnp = 10L,   nobs = 100L,   chr = 1L,   start = 1000L,   end = 20000L,   sep = \"/\",   add_LD = FALSE,   LD_range = NULL )"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/sim_snp_dat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate raw SNP loci for any chromosome with or without LD. — sim_snp_dat","text":"nsnp integer value specifying number SNPs simulate. nobs integer value specifying number individuals simulate. chr integer value specifying chromosome number. start integer value specifying position first SNP. end integer value specifying position last SNP. sep separator deriving genotypes. add_LD logical value indicating whether simulate SNPs LD . LD_range numeric vector `length = 2` indicating range LD SNPs, add_LD = TRUE.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/sim_snp_dat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate raw SNP loci for any chromosome with or without LD. — sim_snp_dat","text":"data frame simulated SNPs columns individuals rows.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/sim_snp_dat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate raw SNP loci for any chromosome with or without LD. — sim_snp_dat","text":"","code":"# example code # Simulate data for 20 snp and 100 individuals on chr 1 geno_data <- sim_snp_dat(nsnp = 20,                      nobs = 100,                      chr = 1,                      start = 1000,                      end = 20000,                      add_LD = TRUE,                      LD_range = c(0.2, 1))"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/summarize_sqlite_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Name and row count for each table in SQLite database. — summarize_sqlite_tables","title":"Name and row count for each table in SQLite database. — summarize_sqlite_tables","text":"Name row count table SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/summarize_sqlite_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Name and row count for each table in SQLite database. — summarize_sqlite_tables","text":"","code":"summarize_sqlite_tables(db_path)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/summarize_sqlite_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Name and row count for each table in SQLite database. — summarize_sqlite_tables","text":"db_path character value indicating path SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/summarize_sqlite_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Name and row count for each table in SQLite database. — summarize_sqlite_tables","text":"data frame row counts tables SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/summarize_sqlite_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Name and row count for each table in SQLite database. — summarize_sqlite_tables","text":"","code":"# \\donttest{ library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Row counts for each table in the database summarize_sqlite_tables(mini_db_path) #>                   table n_rows #> annotations annotations    795 #> genotypes     genotypes    216 #> variants       variants    216  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_impact_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get variants statistics stored in SQLite database based on mutation impact. — variant_impact_summary","title":"Get variants statistics stored in SQLite database based on mutation impact. — variant_impact_summary","text":"Get variants statistics stored SQLite database based mutation impact.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_impact_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get variants statistics stored in SQLite database based on mutation impact. — variant_impact_summary","text":"","code":"variant_impact_summary(db_path)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_impact_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get variants statistics stored in SQLite database based on mutation impact. — variant_impact_summary","text":"db_path character value indicating path SQLite database.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_impact_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get variants statistics stored in SQLite database based on mutation impact. — variant_impact_summary","text":"data frame variant impact summary counts.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_impact_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get variants statistics stored in SQLite database based on mutation impact. — variant_impact_summary","text":"","code":"# \\donttest{ # example code library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Get variant impact summary in the SQLite database variant_impact_summary(mini_db_path) #>   chrom impact_HIGH impact_LOW impact_MODERATE impact_MODIFIER #> 1 Chr05           6         21              34             734  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Get variants statistics stored in SQLite database — variant_stats","title":"Get variants statistics stored in SQLite database — variant_stats","text":"Get variants statistics stored SQLite database","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get variants statistics stored in SQLite database — variant_stats","text":"","code":"variant_stats(db_path, include_annotations = TRUE)"},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get variants statistics stored in SQLite database — variant_stats","text":"db_path character value indicating path SQLite database. include_annotations logical value indicating whether include statistics annotations table.","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get variants statistics stored in SQLite database — variant_stats","text":"data frame variant statistics SQLite databases","code":""},{"path":"https://awkena.github.io/panGenomeBreedr/reference/variant_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get variants statistics stored in SQLite database — variant_stats","text":"","code":"# \\donttest{ library(panGenomeBreedr)  # Define tempdir path <- tempdir()  # Mini SQLite database mini_db <-  system.file(\"extdata\", \"mini_sorghum_variant_vcf.db.gz\",                      package = \"panGenomeBreedr\",                      mustWork = TRUE)  # Path to SQLite databases: INDEL and SNP mini_db_path <- file.path(path, 'mini_sorghum_variant_vcf.db')  # Unzip compressed mini database and save in tempdir R.utils::gunzip(mini_db,                destname = mini_db_path,                remove = FALSE)  # Get variant statistics in the SQLite database variant_stats(mini_db_path) #>   chrom n_variants  min_pos  max_pos n_unique_ids n_annotated #> 1 Chr05        216 75103571 75107320          216         216  # Clean tempdir contents <- list.files(tempdir(),                              full.names = TRUE,                              recursive = TRUE,                              all.files = TRUE,                              include.dirs = TRUE) unlink(contents, recursive = TRUE, force = TRUE) # }"}]
